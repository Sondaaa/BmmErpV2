<?php

/**
 * LigprotitrubTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LigprotitrubTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object LigprotitrubTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Ligprotitrub');
    }
public function getParentByTitreBudgetSituation($id_titre) {
        $q = $this->createQuery('l')
                ->leftJoin('l.Rubrique r')                  
//                ->where('r.id_rubrique is  null')
                ->andWhere('l.id_titre = ?', $id_titre)                
                ->andWhere("l.nordre NOT LIKE '%-%'")
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute();
        return $q;
    }
    public function getParentByTitreBudget($id_titre) {
        $q = $this->createQuery('l')
                ->leftJoin('l.Rubrique r')                  
                ->where('r.id_rubrique is  null')
                ->andWhere('l.id_titre = ?', $id_titre)                
                ->andWhere("l.nordre NOT LIKE '%-%'")
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute();
        return $q;
    }
    
    public function getSousrubriqueByTitreBudget($id_titre, $id_rubrique) {
        $q = $this->createQuery('l')
                ->leftJoin('l.Rubrique r')
                ->where('l.id_titre = ?', $id_titre)
                ->andWhere('r.id_rubrique = ?', $id_rubrique)
                ->andWhere("r.id_rubrique IS not NULL")
                //  ->andWhere("l.nordre NOT LIKE '%-%'")
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute()
        ;
        //  die($q);
        return $q;
    }

    public function getByIdRubriqueAndIdTitre($id_rubrique, $id_titre) {
        $q = $this->createQuery('l')
                ->where('l.id_rubrique = ?', $id_rubrique)
                ->andWhere('l.id_titre = ?', $id_titre)
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute();
        return $q;
    }

    public function getSousRubrique($id_rubrique, $id_titre) {
        $q = $this->createQuery('l')
                ->leftJoin('l.Rubrique r')
                ->where('r.id_rubrique = ?', $id_rubrique)
                ->andWhere('l.id_titre = ?', $id_titre)
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute();
        return $q;
    }

    public function getMontantPaiementAnterieurByLigprotitrub($date = '', $id_ligprotitrub = '') {
        $q = $this->createQuery('l')
                ->select('COALESCE(SUM(m.debit),0) as mnt ')
//               . '+ COALESCE(SUM(lo.mntoperation),0) as mnt ')
//                ->leftJoin('l.Ligneoperationcaisse lo')
                ->leftJoin('l.Documentbudget o')
                ->leftJoin('o.Mouvementbanciare m')
                ->andWhere('o.id_budget = ?', $id_ligprotitrub)
//                ->andWhere('l.id = ?', $id_ligprotitrub)
//                ->andWhere('o.id_documentbudget IS NULL')
                ->andWhere('o.id_type = 2')
                ->andWhere('(o.annule = false OR o.annule IS NULL)')
                ->andWhere('(m.annule = false OR m.annule IS NULL)')
                ->andWhere('m.dateoperation < ?', $date)
//                ->andWhere('lo.dateoperation < ?', $date)
                
                ;

        return $q->execute()->getFirst();
    }

    public function getMontantPaiementCourantByLigprotitrub($date = '', $date_fin = '', $id_ligprotitrub = '') {
     
        $q = $this->createQuery('l')
                ->select('COALESCE(SUM(m.debit),0) as mnt')
                // + COALESCE(SUM(lo.mntoperation),0) ->leftJoin('l.Ligneoperationcaisse lo')
                ->leftJoin('l.Documentbudget o')
                ->leftJoin('o.Mouvementbanciare m')
//                ->andWhere('l.id = ?', $id_ligprotitrub)
                ->andWhere('o.id_budget = ?', $id_ligprotitrub)
//                ->andWhere('o.id_documentbudget IS NULL')
                ->andWhere('o.id_type = 2')
                ->andWhere('(o.annule = false OR o.annule IS NULL)')
                ->andWhere('(m.annule = false OR m.annule IS NULL)')
//                ->andWhere('lo.dateoperation >= ?', $date)
//                ->andWhere('lo.dateoperation <= ?', $date_fin)
                ->andWhere('m.dateoperation >= ?', $date)
                ->andWhere('m.dateoperation <= ?', $date_fin)
;

        return $q->execute()->getFirst();
    }

    public function getOneByIdTitreAndCode($id_titre, $code_rubrique_parent) {
        $q = $this->createQuery('l')
                        ->where('trim(l.code) = ?', $code_rubrique_parent)
                        ->andWhere('l.id_titre = ?', $id_titre)
                        ->execute()->getFirst();
        return $q;
    }

    public function getFirstParentByTitre($id_titre) {
        $q = $this->createQuery('l')
                ->leftJoin('l.Rubrique r')
                ->andWhere('l.id_titre = ?', $id_titre)
                ->andWhere("r.id_rubrique IS NULL")
                ->orderBy('LENGTH(l.nordre), l.nordre')
                ->execute();
        return $q;
    }

    public function getTotalTitreBudget($id_titre) {

        $q = $this->createQuery('l')
                ->select('COALESCE(SUM(COALESCE(l.mnt,0)),0) as mnt')
                ->where('l.id_titre = ?', $id_titre);

        return $q->execute()->getFirst();
    }

    // public function getBugetAndRubrique(){
    //     $exercice=$_SESSION['exercice_budget'];
    //     $query=Doctrine_Query::create()->select("l.*")->from('Ligprotitrub l')
    //     ->innerJoin('l.Rubrique r')
    //     ->innerJoin('l.Titrebudjet t')
    //     ->Andwhere('t.etatbudget=2')
    //     ->Andwhere('EXTRACT(year FROM t.datecreation )='.$exercice)
    //     ->Andwhere("t.typebudget="."'Exercice:".$exercice."'")
    //     ->Andwhere('r.id_rubrique is null')->orderBy('l.id DESC')->execute();
    //     return $query;
    // }
}
