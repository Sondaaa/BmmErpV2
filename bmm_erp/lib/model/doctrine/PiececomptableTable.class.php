<?php

/**
 * PiececomptableTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PiececomptableTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object PiececomptableTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Piececomptable');
    }

    public function getByJournal($id_journal) {
        $q = $this->createQuery('p')
                ->select('p.numero as numero')
                ->from('Piececomptable p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id = ?', $id_journal)
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id']);
        ;
        return $q->execute();
    }

    public function getByNumero($numero) {
        $q = $this->createQuery('p')
                ->select('p.numero as numero')
                ->from('Piececomptable p')
                ->leftJoin('p.Journalcomptable j')
                ->where('trim(p.numero) = ?', trim($numero))
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id']);

        return $q->execute();
    }

    public function getPiece($id) {
        $q = $this->createQuery('p')
                ->select('p.id as id')
                ->from('Piececomptable p')
                ->where('p.id = ?', $id)
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id']);
        ;
        return $q->execute();
    }

    public function loadByNonValide() {
        $q = $this->createQuery('p')
                ->select('p.id as id')
                ->from('Piececomptable p')
                ->where('p.totaldebit <> p.totalcredit')
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id']);
        ;
        return $q;
    }

    public function getTotauxLignes($id) {
        $q = $this->createQuery('p')
                ->select('p.id as id, SUM(l.montantdebit) as debit, SUM(l.montantcredit) as credit')
                ->from('Piececomptable p')
                ->leftJoin('p.Lignepiececomptable l')
                ->where('p.id = ?', $id)
                ->groupBy('p.id');
        return $q->execute();
    }

    public function loadAllFiltreByNumMinMax($journal = '', $num = '',$numexterne = '', $date_debut = '', $date_fin = '', $num_debut = '', $num_fin = '', $type_tri = '', $tri = '',  $exercice_id = '', $numero_min = '', $numero_max = '') {
//        die($exercice_id .'sess'.$_SESSION['dossier_id'].$journal);
        $q = $this->createQuery('p')
                ->select('p.*')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Lignepiececomptable lg ')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Utilisateur u')
                ->leftJoin('u.Agents a')
                ->where('p.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id']);
        if ($journal != '')
            $q = $q->andWhere('UPPER(j.libelle) like ?', '%' . $journal . '%');
        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');

          if ($numexterne != '')
            $q = $q->andWhere('lg.numeroexterne like ?', '%' . $numexterne . '%');
        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);
//        if ($numero_min != '' && $numero_min != null)
//            $q = $q->andWhere('p.id >= ?', $numero_min);
//        if ($numero_max != '' && $numero_max != null)
//            $q = $q->andWhere('p.id <= ?', $numero_max);
//        if ($journal_id != '' && $journal_id != null)
//            $q = $q->andWhere('p.id_journalcomptable = ?', $journal_id);
        if ($type_tri != '') {
            switch ($type_tri) {
                case 'journal':
                    $q = $q->orderBy('j.libelle ' . $tri);
                    break;
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy('a.nomcomplet ' . $tri);
                    break;

                default:
                    break;
            }
        }
        $q = $q->orderBy('p.id');
//        die($q);
        return $q;
    }

  
    public function loadAllFiltre($journal = '', $num = '', $date_debut = '', $date_fin = '', $num_debut = '', $num_fin = '', $type_tri = '', $tri = '', $journal_id = '', $exercice_id = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Utilisateur u')
                ->leftJoin('u.Agents a')
                ->where('p.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id']);
        if ($journal != '')
            $q = $q->andWhere('UPPER(j.libelle) like ?', '%' . $journal . '%');
        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');

        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);

        if ($journal_id != '')
            $q = $q->andWhere('p.id_journalcomptable = ?', $journal_id);
        if ($type_tri != '') {
            switch ($type_tri) {
                case 'journal':
                    $q = $q->orderBy('j.libelle ' . $tri);
                    break;
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy('a.nomcomplet ' . $tri);
                    break;

                default:
                    break;
            }
        }
        $q = $q->orderBy('p.id');
        return $q;
    }

    public function loadAllFiltrePrint($journal, $num, $date_debut, $date_fin, $num_debut, $num_fin, $type_tri, $tri, $exercice_id) {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Utilisateur u')
                ->leftJoin('u.Agents a')
                ->where('p.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id']);
        if ($journal != '')
            $q = $q->andWhere('UPPER(j.libelle) like ?', '%' . $journal . '%');
        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');

        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);
        if ($type_tri != '') {
            switch ($type_tri) {
                case 'journal':
                    $q = $q->orderBy('j.libelle ' . $tri);
                    break;
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy('a.nomcomplet ' . $tri);
                    break;

                default:
                    break;
            }
        }
        return $q->execute();
    }

    public function loadByDatePiece($date = '', $date_debut = '', $date_fin = '', $operation = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($date != '')
            $q = $q->andWhere('p.date ' . $operation . ' ?', $date);

        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);

        return $q->orderBy('p.date desc');
    }

    public function loadByDateSaisie($date = '', $date_debut = '', $date_fin = '', $operation = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($date != '')
            $q = $q->andWhere('p.datecreation ' . $operation . '?', $date);

        if ($date_debut != '')
            $q = $q->andWhere('p.datecreation >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.datecreation <= ?', $date_fin);

        return $q->orderBy('p.date desc');
    }

    public function loadByDateModification($date = '', $date_debut = '', $date_fin = '', $operation = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($date != '')
            $q = $q->andWhere('p.daterenumerotation ' . $operation . '?', $date);

        if ($date_debut != '')
            $q = $q->andWhere('p.daterenumerotation >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.daterenumerotation <= ?', $date_fin);

        return $q->orderBy('p.date desc');
    }

    public function loadByMontant($montant = '', $montant_min = '', $montant_max = '', $operation = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($montant != '')
            $q = $q->andWhere('p.totaldebit ' . $operation . '?', $montant);

        if ($montant_min != '')
            $q = $q->andWhere('p.totaldebit >= ?', $montant_min);
        if ($montant_max != '')
            $q = $q->andWhere('p.totaldebit <= ?', $montant_max);

        return $q->orderBy('p.date desc');
    }

    public function loadByLibelle($libelle = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($libelle != '')
            $q = $q->andWhere("UPPER(p.libelle) like '%" . strtoupper($libelle) . "%'");

        return $q->orderBy('p.date desc');
    }

    public function loadByNumero($numero = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($numero != '')
            $q = $q->andWhere('p.numero like ?', '%' . $numero . '%');

        return $q->orderBy('p.date desc');
    }

    public function loadByReference($reference = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Lignepiececomptable l')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($reference != '')
            $q = $q->andWhere('l.reference like ?', '%' . $reference . '%');

        return $q->orderBy('p.date asc');
    }

    public function loadByJournal($date_debut = '', $date_fin = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($date_debut != '')
            $q = $q->andWhere('n.datedebut <= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('n.datefin >= ?', $date_fin);

        return $q;
    }

    public function loadByExterne($externe = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Lignepiececomptable l')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($externe != '')
            $q = $q->andWhere('l.numeroexterne like ?', '%' . $externe . '%');

        return $q->orderBy('p.date desc');
    }

    public function loadByCompte($compte_debut = '', $compte_fin = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Lignepiececomptable l')
                ->leftJoin('l.Plandossiercomptable s')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($compte_debut != '')
            $q = $q->andWhere('s.numerocompte >= ?', $compte_debut);
        if ($compte_fin != '')
            $q = $q->andWhere('s.numerocompte <= ?', $compte_fin);

        return $q;
    }

    public function loadByDevise($devise = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($devise != '')
            $q = $q->andWhere('p.id_devise = ?', $devise);

        return $q->orderBy('p.date desc');
    }

    public function loadBySens($credit = '', $debit = '', $creditdebit = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($credit != '')
            $q = $q->andWhere('p.totaldebit > p.totalcredit');
        if ($debit != '')
            $q = $q->andWhere('p.totaldebit < p.totalcredit');
        if ($creditdebit != '')
            $q = $q->orWhere('(p.totaldebit >= p.totalcredit OR p.totaldebit <= p.totalcredit)');

        return $q->orderBy('p.date desc');
    }

    public function loadByUser($user = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        $date_debut = $_SESSION['exercice'] . '-01-01';
        $q = $q->andWhere('p.date >= ?', $date_debut);
        $date_fin = $_SESSION['exercice'] . '-12-31';
        $q = $q->andWhere('p.date <= ?', $date_fin);

        if ($user != '')
            $q = $q->andWhere('p.id_user = ?', $user);

        return $q->orderBy('p.date desc');
    }

    public function loadBySerie($journal_id = '', $serie_id = '', $type_tri = '', $tri = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Numeroseriejournal n')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($journal_id != '')
            $q = $q->andWhere('p.id_journalcomptable = ?', $journal_id);
        if ($serie_id != '')
            $q = $q->andWhere('p.id_serie = ?', $serie_id);

        if ($type_tri != '') {
            switch ($type_tri) {

                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);

                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);

                    break;
            }
        }

        return $q->execute();
    }

    public function loadAllFiltreRenumerotation($journal = '', $num = '', $date_debut = '', $date_fin = '', $num_debut = '', $num_fin = '', $type_tri = '', $tri = '', $exercice_id = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Utilisateur u')
                ->leftJoin('u.Agents a')
                ->where('p.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('p.anciennumero IS NOT NULL');
        if ($journal != '')
            $q = $q->andWhere('UPPER(j.libelle) like ?', '%' . $journal . '%');
        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');

        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);

        if ($type_tri != '') {
            switch ($type_tri) {
                case 'journal':
                    $q = $q->orderBy('j.libelle ' . $tri);
                    break;
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy('a.nomcomplet ' . $tri);
                    break;

                default:
                    break;
            }
        }
        return $q;
    }

    public function loadAllFiltreDuplique($journal = '', $num = '', $date_debut = '', $date_fin = '', $num_debut = '', $num_fin = '', $type_tri = '', $tri = '', $journal_id = '', $exercice_id = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->leftJoin('p.Numeroseriejournal n')
                ->leftJoin('p.Utilisateur u')
                ->leftJoin('u.Agents a')
                ->where('p.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('p.id_piecesource IS NOT NULL');
        if ($journal != '')
            $q = $q->andWhere('UPPER(j.libelle) like ?', '%' . strtoupper($journal) . '%');
        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');

        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);
        if ($journal_id != '')
            $q = $q->andWhere('p.id_journalcomptable = ?', $journal_id);
        if ($type_tri != '') {
            switch ($type_tri) {
                case 'journal':
                    $q = $q->orderBy('j.libelle ' . $tri);
                    break;
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy("CONCAT(a.nomcomplet, ' ', a.prenom) " . $tri);
                    break;

                default:
                    break;
            }
        }
        return $q;
    }

    public function loadAllFiltreLiberation($journal = '', $num = '', $date_debut = '', $date_fin = '', $num_debut = '', $num_fin = '', $type_tri = '', $tri = '', $journal_id = '', $exercice_id = '') {

        $q = $this->createQuery('p')
                ->from('Piececomptable p')
                ->leftJoin('p.Journalcomptable j');
        if ($type_tri == 'serie')
            $q = $q->leftJoin('p.Numeroseriejournal n');
        if ($type_tri == 'user')
            $q = $q->leftJoin('p.Utilisateur u')
                    ->leftJoin('u.Agents a');
        $q = $q->where('p.id_journalcomptable = ' . $journal_id)
                ->andWhere('p.id_piecesource IS NOT NULL')
                ->andWhere("p.id_exercice = " . $exercice_id)
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($num != '')
            $q = $q->andWhere('p.numero like ?', '%' . $num . '%');
        if ($date_debut != '')
            $q = $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q = $q->andWhere('p.date <= ?', $date_fin);
        if ($num_debut != '')
            $q = $q->andWhere('p.numero >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.numero <= ?', $num_fin);

        if ($type_tri != '') {
            switch ($type_tri) {
                case 'date':
                    $q = $q->orderBy('p.date ' . $tri);
                    break;
                case 'numero':
                    $q = $q->orderBy('p.numero ' . $tri);
                    break;
                case 'serie':
                    $q = $q->orderBy('n.prefixe ' . $tri);
                    break;
                case 'user':
                    $q = $q->orderBy("CONCAT(a.nomcomplet, ' ', a.prenom) " . $tri);
                    break;

                default:
                    break;
            }
        }

        return $q;
    }

    public function getPieceRAN($id_exercice = '') {
        $q = $this->createQuery('p')
                ->select('p.id as id')
                ->from('Piececomptable p')
                ->leftJoin('p.Journalcomptable pj')
                ->where('pj.id_type_journal = ?', 4)
                ->andWhere('p.id_exercice=' . $id_exercice)
                ->andWhere('pj.id_dossier = ?', $_SESSION['dossier_id']);

        return $q->execute();
    }

    public function loadFiltre($num_debut = '', $num_fin = '') {
        $q = $this->createQuery('p')
                ->leftJoin('p.Journalcomptable j')
                ->where('p.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere('j.id_dossier = ?', $_SESSION['dossier_id']);
        if ($num_debut != '')
            $q = $q->andWhere('p.id >= ?', $num_debut);
        if ($num_fin != '')
            $q = $q->andWhere('p.id <= ?', $num_fin);
        return $q->orderBy('p.id asc');
        ;
    }

    public function loadByIntervalNumero($compte_min = '', $compte_max = '') {

        $q = $this->createQuery('p')
                ->Where('p.id_exercice = ?', $_SESSION['exercice_id']);
        if ($compte_min != '')
            $q->andWhere('p.id >= ' . $compte_min);
        if ($compte_max != '')
            $q->andWhere('p.id <= ' . $compte_max);
        $q->orderBy('p.id  asc');
        return $q->execute();
    }

}
