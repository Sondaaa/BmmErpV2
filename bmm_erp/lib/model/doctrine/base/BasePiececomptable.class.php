<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Piececomptable', 'doctrine');

/**
 * BasePiececomptable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $numero
 * @property string $libelle
 * @property date $date
 * @property decimal $totaldebit
 * @property decimal $totalcredit
 * @property integer $reserve
 * @property integer $editable
 * @property integer $id_journalcomptable
 * @property integer $id_serie
 * @property integer $id_user
 * @property date $datecreation
 * @property integer $id_piecesource
 * @property integer $id_exercice
 * @property date $dateliberation
 * @property integer $liberer
 * @property string $anciennumero
 * @property date $daterenumerotation
 * @property integer $id_devise
 * @property Journalcomptable $Journalcomptable
 * @property Numeroseriejournal $Numeroseriejournal
 * @property Utilisateur $Utilisateur
 * @property Doctrine_Collection $Piececomptable
 * @property Exercice $Exercice
 * @property Devise $Devise
 * @property Doctrine_Collection $Lignepiececomptable
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method string              getNumero()              Returns the current record's "numero" value
 * @method string              getLibelle()             Returns the current record's "libelle" value
 * @method date                getDate()                Returns the current record's "date" value
 * @method decimal             getTotaldebit()          Returns the current record's "totaldebit" value
 * @method decimal             getTotalcredit()         Returns the current record's "totalcredit" value
 * @method integer             getReserve()             Returns the current record's "reserve" value
 * @method integer             getEditable()            Returns the current record's "editable" value
 * @method integer             getIdJournalcomptable()  Returns the current record's "id_journalcomptable" value
 * @method integer             getIdSerie()             Returns the current record's "id_serie" value
 * @method integer             getIdUser()              Returns the current record's "id_user" value
 * @method date                getDatecreation()        Returns the current record's "datecreation" value
 * @method integer             getIdPiecesource()       Returns the current record's "id_piecesource" value
 * @method integer             getIdExercice()          Returns the current record's "id_exercice" value
 * @method date                getDateliberation()      Returns the current record's "dateliberation" value
 * @method integer             getLiberer()             Returns the current record's "liberer" value
 * @method string              getAnciennumero()        Returns the current record's "anciennumero" value
 * @method date                getDaterenumerotation()  Returns the current record's "daterenumerotation" value
 * @method integer             getIdDevise()            Returns the current record's "id_devise" value
 * @method Journalcomptable    getJournalcomptable()    Returns the current record's "Journalcomptable" value
 * @method Numeroseriejournal  getNumeroseriejournal()  Returns the current record's "Numeroseriejournal" value
 * @method Utilisateur         getUtilisateur()         Returns the current record's "Utilisateur" value
 * @method Doctrine_Collection getPiececomptable()      Returns the current record's "Piececomptable" collection
 * @method Exercice            getExercice()            Returns the current record's "Exercice" value
 * @method Devise              getDevise()              Returns the current record's "Devise" value
 * @method Doctrine_Collection getLignepiececomptable() Returns the current record's "Lignepiececomptable" collection
 * @method Piececomptable      setId()                  Sets the current record's "id" value
 * @method Piececomptable      setNumero()              Sets the current record's "numero" value
 * @method Piececomptable      setLibelle()             Sets the current record's "libelle" value
 * @method Piececomptable      setDate()                Sets the current record's "date" value
 * @method Piececomptable      setTotaldebit()          Sets the current record's "totaldebit" value
 * @method Piececomptable      setTotalcredit()         Sets the current record's "totalcredit" value
 * @method Piececomptable      setReserve()             Sets the current record's "reserve" value
 * @method Piececomptable      setEditable()            Sets the current record's "editable" value
 * @method Piececomptable      setIdJournalcomptable()  Sets the current record's "id_journalcomptable" value
 * @method Piececomptable      setIdSerie()             Sets the current record's "id_serie" value
 * @method Piececomptable      setIdUser()              Sets the current record's "id_user" value
 * @method Piececomptable      setDatecreation()        Sets the current record's "datecreation" value
 * @method Piececomptable      setIdPiecesource()       Sets the current record's "id_piecesource" value
 * @method Piececomptable      setIdExercice()          Sets the current record's "id_exercice" value
 * @method Piececomptable      setDateliberation()      Sets the current record's "dateliberation" value
 * @method Piececomptable      setLiberer()             Sets the current record's "liberer" value
 * @method Piececomptable      setAnciennumero()        Sets the current record's "anciennumero" value
 * @method Piececomptable      setDaterenumerotation()  Sets the current record's "daterenumerotation" value
 * @method Piececomptable      setIdDevise()            Sets the current record's "id_devise" value
 * @method Piececomptable      setJournalcomptable()    Sets the current record's "Journalcomptable" value
 * @method Piececomptable      setNumeroseriejournal()  Sets the current record's "Numeroseriejournal" value
 * @method Piececomptable      setUtilisateur()         Sets the current record's "Utilisateur" value
 * @method Piececomptable      setPiececomptable()      Sets the current record's "Piececomptable" collection
 * @method Piececomptable      setExercice()            Sets the current record's "Exercice" value
 * @method Piececomptable      setDevise()              Sets the current record's "Devise" value
 * @method Piececomptable      setLignepiececomptable() Sets the current record's "Lignepiececomptable" collection
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePiececomptable extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('piececomptable');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'piececomptable_id',
             'length' => 4,
             ));
        $this->hasColumn('numero', 'string', 20, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 20,
             ));
        $this->hasColumn('libelle', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('totaldebit', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '0',
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('totalcredit', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '0',
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('reserve', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '1',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('editable', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '1',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('id_journalcomptable', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_serie', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_user', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('datecreation', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_piecesource', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_exercice', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('dateliberation', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('liberer', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'default' => '0',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('anciennumero', 'string', 20, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 20,
             ));
        $this->hasColumn('daterenumerotation', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_devise', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Journalcomptable', array(
             'local' => 'id_journalcomptable',
             'foreign' => 'id'));

        $this->hasOne('Numeroseriejournal', array(
             'local' => 'id_serie',
             'foreign' => 'id'));

        $this->hasOne('Utilisateur', array(
             'local' => 'id_user',
             'foreign' => 'id'));

        $this->hasMany('Piececomptable', array(
             'local' => 'id',
             'foreign' => 'id_piecesource'));

        $this->hasOne('Exercice', array(
             'local' => 'id_exercice',
             'foreign' => 'id'));

        $this->hasOne('Devise', array(
             'local' => 'id_devise',
             'foreign' => 'id'));

        $this->hasMany('Lignepiececomptable', array(
             'local' => 'id',
             'foreign' => 'id_piececomptable'));
    }
}