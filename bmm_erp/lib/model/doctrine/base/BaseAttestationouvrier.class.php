<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Attestationouvrier', 'doctrine');

/**
 * BaseAttestationouvrier
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $id_chantier
 * @property integer $id_direction
 * @property integer $id_service
 * @property integer $id_unite
 * @property string $budget
 * @property string $porte
 * @property date $datedebut
 * @property date $datefin
 * @property integer $id_ouvrier
 * @property integer $id_contratouvrier
 * @property Direction $Direction
 * @property Chantier $Chantier
 * @property Servicerh $Servicerh
 * @property Unite $Unite
 * @property Ouvrier $Ouvrier
 * @property Contratouvrier $Contratouvrier
 * 
 * @method integer            getId()                Returns the current record's "id" value
 * @method integer            getIdChantier()        Returns the current record's "id_chantier" value
 * @method integer            getIdDirection()       Returns the current record's "id_direction" value
 * @method integer            getIdService()         Returns the current record's "id_service" value
 * @method integer            getIdUnite()           Returns the current record's "id_unite" value
 * @method string             getBudget()            Returns the current record's "budget" value
 * @method string             getPorte()             Returns the current record's "porte" value
 * @method date               getDatedebut()         Returns the current record's "datedebut" value
 * @method date               getDatefin()           Returns the current record's "datefin" value
 * @method integer            getIdOuvrier()         Returns the current record's "id_ouvrier" value
 * @method integer            getIdContratouvrier()  Returns the current record's "id_contratouvrier" value
 * @method Direction          getDirection()         Returns the current record's "Direction" value
 * @method Chantier           getChantier()          Returns the current record's "Chantier" value
 * @method Servicerh          getServicerh()         Returns the current record's "Servicerh" value
 * @method Unite              getUnite()             Returns the current record's "Unite" value
 * @method Ouvrier            getOuvrier()           Returns the current record's "Ouvrier" value
 * @method Contratouvrier     getContratouvrier()    Returns the current record's "Contratouvrier" value
 * @method Attestationouvrier setId()                Sets the current record's "id" value
 * @method Attestationouvrier setIdChantier()        Sets the current record's "id_chantier" value
 * @method Attestationouvrier setIdDirection()       Sets the current record's "id_direction" value
 * @method Attestationouvrier setIdService()         Sets the current record's "id_service" value
 * @method Attestationouvrier setIdUnite()           Sets the current record's "id_unite" value
 * @method Attestationouvrier setBudget()            Sets the current record's "budget" value
 * @method Attestationouvrier setPorte()             Sets the current record's "porte" value
 * @method Attestationouvrier setDatedebut()         Sets the current record's "datedebut" value
 * @method Attestationouvrier setDatefin()           Sets the current record's "datefin" value
 * @method Attestationouvrier setIdOuvrier()         Sets the current record's "id_ouvrier" value
 * @method Attestationouvrier setIdContratouvrier()  Sets the current record's "id_contratouvrier" value
 * @method Attestationouvrier setDirection()         Sets the current record's "Direction" value
 * @method Attestationouvrier setChantier()          Sets the current record's "Chantier" value
 * @method Attestationouvrier setServicerh()         Sets the current record's "Servicerh" value
 * @method Attestationouvrier setUnite()             Sets the current record's "Unite" value
 * @method Attestationouvrier setOuvrier()           Sets the current record's "Ouvrier" value
 * @method Attestationouvrier setContratouvrier()    Sets the current record's "Contratouvrier" value
 * 
 * @package    PhpProjectTest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAttestationouvrier extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('attestationouvrier');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'attestationouvrier_id',
             'length' => 4,
             ));
        $this->hasColumn('id_chantier', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_direction', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_service', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_unite', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('budget', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 255,
             ));
        $this->hasColumn('porte', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 255,
             ));
        $this->hasColumn('datedebut', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('datefin', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_ouvrier', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_contratouvrier', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Direction', array(
             'local' => 'id_direction',
             'foreign' => 'id'));

        $this->hasOne('Chantier', array(
             'local' => 'id_chantier',
             'foreign' => 'id'));

        $this->hasOne('Servicerh', array(
             'local' => 'id_service',
             'foreign' => 'id'));

        $this->hasOne('Unite', array(
             'local' => 'id_unite',
             'foreign' => 'id'));

        $this->hasOne('Ouvrier', array(
             'local' => 'id_ouvrier',
             'foreign' => 'id'));

        $this->hasOne('Contratouvrier', array(
             'local' => 'id_contratouvrier',
             'foreign' => 'id'));
    }
}