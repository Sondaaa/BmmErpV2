<?php

// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Mouvementbanciare', 'doctrine');

/**
 * BaseMouvementbanciare
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $reford
 * @property integer $id_object
 * @property string $refbenifi
 * @property integer $id_banque
 * @property integer $id_instrument
 * @property integer $id_cheque
 * @property decimal $debit
 * @property decimal $credit
 * @property decimal $solde
 * @property decimal $mntenoper
 * @property string $ribbeni
 * @property date $dateoperation
 * @property integer $id_type
 * @property string $nomoperation
 * @property string $referenceautre
 * @property integer $numero
 * @property integer $id_bordereauvirement
 * @property integer $id_documentbudget
 * @property integer $id_mouvement
 * @property boolean $rapproche
 * @property integer $id_budget
 * @property boolean $rapprochecommission
 * @property boolean $annule
 * @property integer $id_documentachat
 * @property integer $id_declaration
 * @property integer $id_alimentationcompte
 * @property Documentachat $Documentachat
 * @property Declaration $Declaration
 * @property Bordereauvirement $Bordereauvirement
 * @property Documentbudget $Documentbudget
 * @property Doctrine_Collection $Mouvementbanciare
 * @property Caissesbanques $Caissesbanques
 * @property Papiercheque $Papiercheque
 * @property Instrumentpaiment $Instrumentpaiment
 * @property Objetreglement $Objetreglement
 * @property Typeoperation $Typeoperation
 * @property Alimentationcompte $Alimentationcompte
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method string              getReford()                Returns the current record's "reford" value
 * @method integer             getIdObject()              Returns the current record's "id_object" value
 * @method string              getRefbenifi()             Returns the current record's "refbenifi" value
 * @method integer             getIdBanque()              Returns the current record's "id_banque" value
 * @method integer             getIdInstrument()          Returns the current record's "id_instrument" value
 * @method integer             getIdCheque()              Returns the current record's "id_cheque" value
 * @method decimal             getDebit()                 Returns the current record's "debit" value
 * @method decimal             getCredit()                Returns the current record's "credit" value
 * @method decimal             getSolde()                 Returns the current record's "solde" value
 * @method decimal             getMntenoper()             Returns the current record's "mntenoper" value
 * @method string              getRibbeni()               Returns the current record's "ribbeni" value
 * @method date                getDateoperation()         Returns the current record's "dateoperation" value
 * @method integer             getIdType()                Returns the current record's "id_type" value
 * @method string              getNomoperation()          Returns the current record's "nomoperation" value
 * @method string              getReferenceautre()        Returns the current record's "referenceautre" value
 * @method integer             getNumero()                Returns the current record's "numero" value
 * @method integer             getIdBordereauvirement()   Returns the current record's "id_bordereauvirement" value
 * @method integer             getIdDocumentbudget()      Returns the current record's "id_documentbudget" value
 * @method integer             getIdBudget()              Returns the current record's "id_budget" value
 * @method integer             getIdMouvement()           Returns the current record's "id_mouvement" value
 * @method boolean             getRapproche()             Returns the current record's "rapproche" value
 * @method boolean             getRapprochecommission()   Returns the current record's "rapprochecommission" value
 * @method boolean             getAnnule()                Returns the current record's "annule" value
 * @method integer             getIdDocumentachat()       Returns the current record's "id_documentachat" value
 * @method integer             getIdDeclaration()         Returns the current record's "id_declaration" value
 * @method integer             getIdAlimentationcompte()  Returns the current record's "id_alimentationcompte" value
 * @method Documentachat       getDocumentachat()         Returns the current record's "Documentachat" value
 * @method Declaration         getDeclaration()           Returns the current record's "Declaration" value
 * @method Bordereauvirement   getBordereauvirement()     Returns the current record's "Bordereauvirement" value
 * @method Documentbudget      getDocumentbudget()        Returns the current record's "Documentbudget" value
 * @method Doctrine_Collection getMouvementbanciare()     Returns the current record's "Mouvementbanciare" collection
 * @method Caissesbanques      getCaissesbanques()        Returns the current record's "Caissesbanques" value
 * @method Papiercheque        getPapiercheque()          Returns the current record's "Papiercheque" value
 * @method Instrumentpaiment   getInstrumentpaiment()     Returns the current record's "Instrumentpaiment" value
 * @method Objetreglement      getObjetreglement()        Returns the current record's "Objetreglement" value
 * @method Typeoperation       getTypeoperation()         Returns the current record's "Typeoperation" value
 * @method Alimentationcompte  getAlimentationcompte()    Returns the current record's "Alimentationcompte" value
 * @method Mouvementbanciare   setId()                    Sets the current record's "id" value
 * @method Mouvementbanciare   setReford()                Sets the current record's "reford" value
 * @method Mouvementbanciare   setIdObject()              Sets the current record's "id_object" value
 * @method Mouvementbanciare   setRefbenifi()             Sets the current record's "refbenifi" value
 * @method Mouvementbanciare   setIdBanque()              Sets the current record's "id_banque" value
 * @method Mouvementbanciare   setIdInstrument()          Sets the current record's "id_instrument" value
 * @method Mouvementbanciare   setIdCheque()              Sets the current record's "id_cheque" value
 * @method Mouvementbanciare   setDebit()                 Sets the current record's "debit" value
 * @method Mouvementbanciare   setCredit()                Sets the current record's "credit" value
 * @method Mouvementbanciare   setSolde()                 Sets the current record's "solde" value
 * @method Mouvementbanciare   setMntenoper()             Sets the current record's "mntenoper" value
 * @method Mouvementbanciare   setRibbeni()               Sets the current record's "ribbeni" value
 * @method Mouvementbanciare   setDateoperation()         Sets the current record's "dateoperation" value
 * @method Mouvementbanciare   setIdType()                Sets the current record's "id_type" value
 * @method Mouvementbanciare   setNomoperation()          Sets the current record's "nomoperation" value
 * @method Mouvementbanciare   setReferenceautre()        Sets the current record's "referenceautre" value
 * @method Mouvementbanciare   setNumero()                Sets the current record's "numero" value
 * @method Mouvementbanciare   setIdBordereauvirement()   Sets the current record's "id_bordereauvirement" value
 * @method Mouvementbanciare   setIdDocumentbudget()      Sets the current record's "id_documentbudget" value
 * @method Mouvementbanciare   setIdMouvement()           Sets the current record's "id_mouvement" value
 * @method Mouvementbanciare   setRapproche()             Sets the current record's "rapproche" value
 * @method Mouvementbanciare   setIdBudget()              Sets the current record's "id_budget" value
 * @method Mouvementbanciare   setRapprochecommission()   Sets the current record's "rapprochecommission" value
 * @method Mouvementbanciare   setAnnule()                Sets the current record's "annule" value
 * @method Mouvementbanciare   setIdDocumentachat()       Sets the current record's "id_documentachat" value
 * @method Mouvementbanciare   setIdDeclaration()         Sets the current record's "id_declaration" value
 * @method Mouvementbanciare   setIdAlimentationcompte()  Sets the current record's "id_alimentationcompte" value
 * @method Mouvementbanciare   setDocumentachat()         Sets the current record's "Documentachat" value
 * @method Mouvementbanciare   setDeclaration()           Sets the current record's "Declaration" value
 * @method Mouvementbanciare   setBordereauvirement()     Sets the current record's "Bordereauvirement" value
 * @method Mouvementbanciare   setDocumentbudget()        Sets the current record's "Documentbudget" value
 * @method Mouvementbanciare   setMouvementbanciare()     Sets the current record's "Mouvementbanciare" collection
 * @method Mouvementbanciare   setCaissesbanques()        Sets the current record's "Caissesbanques" value
 * @method Mouvementbanciare   setPapiercheque()          Sets the current record's "Papiercheque" value
 * @method Mouvementbanciare   setInstrumentpaiment()     Sets the current record's "Instrumentpaiment" value
 * @method Mouvementbanciare   setObjetreglement()        Sets the current record's "Objetreglement" value
 * @method Mouvementbanciare   setTypeoperation()         Sets the current record's "Typeoperation" value
 * @method Mouvementbanciare   setAlimentationcompte()    Sets the current record's "Alimentationcompte" value
 * 
 * @package    Tes
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMouvementbanciare extends sfDoctrineRecord {

    public function setTableDefinition() {
        $this->setTableName('mouvementbanciare');
        $this->hasColumn('id', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'primary' => true,
            'sequence' => 'mouvementbanciare_id',
            'length' => 4,
        ));
        $this->hasColumn('reford', 'string', 20, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 20,
        ));
        $this->hasColumn('id_object', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('refbenifi', 'string', 200, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 200,
        ));
        $this->hasColumn('id_banque', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_instrument', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_cheque', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('debit', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 18,
        ));
        $this->hasColumn('credit', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 18,
        ));
        $this->hasColumn('solde', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 18,
        ));
        $this->hasColumn('mntenoper', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 18,
        ));
        $this->hasColumn('ribbeni', 'string', 50, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 50,
        ));
        $this->hasColumn('dateoperation', 'date', 25, array(
            'type' => 'date',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 25,
        ));
        $this->hasColumn('id_type', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('nomoperation', 'string', 254, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 254,
        ));
        $this->hasColumn('referenceautre', 'string', 20, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 20,
        ));
        $this->hasColumn('numero', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_bordereauvirement', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_documentbudget', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_mouvement', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('rapproche', 'boolean', 1, array(
            'type' => 'boolean',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => 'false',
            'primary' => false,
            'length' => 1,
        ));
        $this->hasColumn('rapprochecommission', 'boolean', 1, array(
            'type' => 'boolean',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => 'false',
            'primary' => false,
            'length' => 1,
        ));
        $this->hasColumn('annule', 'boolean', 1, array(
            'type' => 'boolean',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => 'false',
            'primary' => false,
            'length' => 1,
        ));
        $this->hasColumn('id_documentachat', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_declaration', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_alimentationcompte', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
		 $this->hasColumn('id_budget', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasOne('Documentachat', array(
            'local' => 'id_documentachat',
            'foreign' => 'id'));

        $this->hasOne('Declaration', array(
            'local' => 'id_declaration',
            'foreign' => 'id'));

        $this->hasOne('Bordereauvirement', array(
            'local' => 'id_bordereauvirement',
            'foreign' => 'id'));

        $this->hasOne('Documentbudget', array(
            'local' => 'id_documentbudget',
            'foreign' => 'id'));

        $this->hasMany('Mouvementbanciare', array(
            'local' => 'id',
            'foreign' => 'id_mouvement'));

        $this->hasOne('Caissesbanques', array(
            'local' => 'id_banque',
            'foreign' => 'id'));

        $this->hasOne('Papiercheque', array(
            'local' => 'id_cheque',
            'foreign' => 'id'));

        $this->hasOne('Instrumentpaiment', array(
            'local' => 'id_instrument',
            'foreign' => 'id'));

        $this->hasOne('Objetreglement', array(
            'local' => 'id_object',
            'foreign' => 'id'));

        $this->hasOne('Typeoperation', array(
            'local' => 'id_type',
            'foreign' => 'id'));
		$this->hasOne('Titrebudjet', array(
             'local' => 'id_budget',
             'foreign' => 'id'));
        $this->hasOne('Alimentationcompte', array(
            'local' => 'id_alimentationcompte',
            'foreign' => 'id'));
    }

}
