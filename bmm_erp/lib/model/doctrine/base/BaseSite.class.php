<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Site', 'doctrine');

/**
 * BaseSite
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $site
 * @property integer $id_societe
 * @property integer $id_adresse
 * @property string $adresse_site
 * @property string $code
 * @property Adresse $Adresse
 * @property Societe $Societe
 * @property Doctrine_Collection $Magasin
 * @property Doctrine_Collection $Immobilisation
 * @property Doctrine_Collection $Etage
 * @property Doctrine_Collection $Bureaux
 * @property Doctrine_Collection $Direction
 * @property Doctrine_Collection $Projet
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getSite()           Returns the current record's "site" value
 * @method integer             getIdSociete()      Returns the current record's "id_societe" value
 * @method integer             getIdAdresse()      Returns the current record's "id_adresse" value
 * @method string              getAdresseSite()    Returns the current record's "adresse_site" value
 * @method string              getCode()           Returns the current record's "code" value
 * @method Adresse             getAdresse()        Returns the current record's "Adresse" value
 * @method Societe             getSociete()        Returns the current record's "Societe" value
 * @method Doctrine_Collection getMagasin()        Returns the current record's "Magasin" collection
 * @method Doctrine_Collection getImmobilisation() Returns the current record's "Immobilisation" collection
 * @method Doctrine_Collection getEtage()          Returns the current record's "Etage" collection
 * @method Doctrine_Collection getBureaux()        Returns the current record's "Bureaux" collection
 * @method Doctrine_Collection getDirection()      Returns the current record's "Direction" collection
 * @method Doctrine_Collection getProjet()         Returns the current record's "Projet" collection
 * @method Site                setId()             Sets the current record's "id" value
 * @method Site                setSite()           Sets the current record's "site" value
 * @method Site                setIdSociete()      Sets the current record's "id_societe" value
 * @method Site                setIdAdresse()      Sets the current record's "id_adresse" value
 * @method Site                setAdresseSite()    Sets the current record's "adresse_site" value
 * @method Site                setCode()           Sets the current record's "code" value
 * @method Site                setAdresse()        Sets the current record's "Adresse" value
 * @method Site                setSociete()        Sets the current record's "Societe" value
 * @method Site                setMagasin()        Sets the current record's "Magasin" collection
 * @method Site                setImmobilisation() Sets the current record's "Immobilisation" collection
 * @method Site                setEtage()          Sets the current record's "Etage" collection
 * @method Site                setBureaux()        Sets the current record's "Bureaux" collection
 * @method Site                setDirection()      Sets the current record's "Direction" collection
 * @method Site                setProjet()         Sets the current record's "Projet" collection
 * 
 * @package    Bmm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSite extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('site');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'site_id',
             'length' => 4,
             ));
        $this->hasColumn('site', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('id_societe', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_adresse', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('adresse_site', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('code', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Adresse', array(
             'local' => 'id_adresse',
             'foreign' => 'id'));

        $this->hasOne('Societe', array(
             'local' => 'id_societe',
             'foreign' => 'id'));

        $this->hasMany('Magasin', array(
             'local' => 'id',
             'foreign' => 'id_site'));

        $this->hasMany('Immobilisation', array(
             'local' => 'id',
             'foreign' => 'id_site'));

        $this->hasMany('Etage', array(
             'local' => 'id',
             'foreign' => 'id_site'));

        $this->hasMany('Bureaux', array(
             'local' => 'id',
             'foreign' => 'id_site'));

        $this->hasMany('Direction', array(
             'local' => 'id',
             'foreign' => 'id_site'));

        $this->hasMany('Projet', array(
             'local' => 'id',
             'foreign' => 'id_site'));
    }
}