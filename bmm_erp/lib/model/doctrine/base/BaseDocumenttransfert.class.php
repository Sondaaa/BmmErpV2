<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Documenttransfert', 'doctrine');

/**
 * BaseDocumenttransfert
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $id_immo
 * @property string $libelle
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $id_user
 * @property integer $id_typetransfert
 * @property string $etat_transfert
 * @property string $description
 * @property string $type
 * @property Typeaffectationimmo $Typeaffectationimmo
 * @property Utilisateur $Utilisateur
 * @property Doctrine_Collection $Lignedocumenttransfert
 * 
 * @method integer             getId()                     Returns the current record's "id" value
 * @method integer             getIdImmo()                 Returns the current record's "id_immo" value
 * @method string              getLibelle()                Returns the current record's "libelle" value
 * @method timestamp           getCreatedAt()              Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()              Returns the current record's "updated_at" value
 * @method integer             getIdUser()                 Returns the current record's "id_user" value
 * @method integer             getIdTypetransfert()        Returns the current record's "id_typetransfert" value
 * @method string              getEtatTransfert()          Returns the current record's "etat_transfert" value
 * @method string              getDescription()            Returns the current record's "description" value
 * @method string              getType()                   Returns the current record's "type" value
 * @method Typeaffectationimmo getTypeaffectationimmo()    Returns the current record's "Typeaffectationimmo" value
 * @method Utilisateur         getUtilisateur()            Returns the current record's "Utilisateur" value
 * @method Doctrine_Collection getLignedocumenttransfert() Returns the current record's "Lignedocumenttransfert" collection
 * @method Documenttransfert   setId()                     Sets the current record's "id" value
 * @method Documenttransfert   setIdImmo()                 Sets the current record's "id_immo" value
 * @method Documenttransfert   setLibelle()                Sets the current record's "libelle" value
 * @method Documenttransfert   setCreatedAt()              Sets the current record's "created_at" value
 * @method Documenttransfert   setUpdatedAt()              Sets the current record's "updated_at" value
 * @method Documenttransfert   setIdUser()                 Sets the current record's "id_user" value
 * @method Documenttransfert   setIdTypetransfert()        Sets the current record's "id_typetransfert" value
 * @method Documenttransfert   setEtatTransfert()          Sets the current record's "etat_transfert" value
 * @method Documenttransfert   setDescription()            Sets the current record's "description" value
 * @method Documenttransfert   setType()                   Sets the current record's "type" value
 * @method Documenttransfert   setTypeaffectationimmo()    Sets the current record's "Typeaffectationimmo" value
 * @method Documenttransfert   setUtilisateur()            Sets the current record's "Utilisateur" value
 * @method Documenttransfert   setLignedocumenttransfert() Sets the current record's "Lignedocumenttransfert" collection
 * 
 * @package    Bmm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDocumenttransfert extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('documenttransfert');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'documenttransfert_id',
             'length' => 4,
             ));
        $this->hasColumn('id_immo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('libelle', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_user', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_typetransfert', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('etat_transfert', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('type', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Typeaffectationimmo', array(
             'local' => 'id_typetransfert',
             'foreign' => 'id'));

        $this->hasOne('Utilisateur', array(
             'local' => 'id_user',
             'foreign' => 'id'));

        $this->hasMany('Lignedocumenttransfert', array(
             'local' => 'id',
             'foreign' => 'id_documenttransfert'));
    }
}