<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Marches', 'doctrine');

/**
 * BaseMarches
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $numero
 * @property date $datecreation
 * @property integer $delai
 * @property string $object
 * @property string $mrpme
 * @property integer $nbrelot
 * @property string $titulaire
 * @property integer $nbrebinificaire
 * @property decimal $mntttc
 * @property decimal $retenuegaraentie
 * @property decimal $cautionement
 * @property decimal $avance
 * @property decimal $penalite
 * @property integer $id_passaction
 * @property integer $id_projet
 * @property integer $id_nature
 * @property integer $id_user
 * @property integer $id_documentachat
 * @property integer $id_frs
 * @property date $datecommencement
 * @property decimal $maxpinalite
 * @property Procedurepassation $Procedurepassation
 * @property Projet $Projet
 * @property Naturemarche $Naturemarche
 * @property Utilisateur $Utilisateur
 * @property Documentachat $Documentachat
 * @property Fournisseur $Fournisseur
 * @property Doctrine_Collection $Lots
 * @property Doctrine_Collection $Financement
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getNumero()             Returns the current record's "numero" value
 * @method date                getDatecreation()       Returns the current record's "datecreation" value
 * @method integer             getDelai()              Returns the current record's "delai" value
 * @method string              getObject()             Returns the current record's "object" value
 * @method string              getMrpme()              Returns the current record's "mrpme" value
 * @method integer             getNbrelot()            Returns the current record's "nbrelot" value
 * @method string              getTitulaire()          Returns the current record's "titulaire" value
 * @method integer             getNbrebinificaire()    Returns the current record's "nbrebinificaire" value
 * @method decimal             getMntttc()             Returns the current record's "mntttc" value
 * @method decimal             getRetenuegaraentie()   Returns the current record's "retenuegaraentie" value
 * @method decimal             getCautionement()       Returns the current record's "cautionement" value
 * @method decimal             getAvance()             Returns the current record's "avance" value
 * @method decimal             getPenalite()           Returns the current record's "penalite" value
 * @method integer             getIdPassaction()       Returns the current record's "id_passaction" value
 * @method integer             getIdProjet()           Returns the current record's "id_projet" value
 * @method integer             getIdNature()           Returns the current record's "id_nature" value
 * @method integer             getIdUser()             Returns the current record's "id_user" value
 * @method integer             getIdDocumentachat()    Returns the current record's "id_documentachat" value
 * @method integer             getIdFrs()              Returns the current record's "id_frs" value
 * @method date                getDatecommencement()   Returns the current record's "datecommencement" value
 * @method decimal             getMaxpinalite()        Returns the current record's "maxpinalite" value
 * @method Procedurepassation  getProcedurepassation() Returns the current record's "Procedurepassation" value
 * @method Projet              getProjet()             Returns the current record's "Projet" value
 * @method Naturemarche        getNaturemarche()       Returns the current record's "Naturemarche" value
 * @method Utilisateur         getUtilisateur()        Returns the current record's "Utilisateur" value
 * @method Documentachat       getDocumentachat()      Returns the current record's "Documentachat" value
 * @method Fournisseur         getFournisseur()        Returns the current record's "Fournisseur" value
 * @method Doctrine_Collection getLots()               Returns the current record's "Lots" collection
 * @method Doctrine_Collection getFinancement()        Returns the current record's "Financement" collection
 * @method Marches             setId()                 Sets the current record's "id" value
 * @method Marches             setNumero()             Sets the current record's "numero" value
 * @method Marches             setDatecreation()       Sets the current record's "datecreation" value
 * @method Marches             setDelai()              Sets the current record's "delai" value
 * @method Marches             setObject()             Sets the current record's "object" value
 * @method Marches             setMrpme()              Sets the current record's "mrpme" value
 * @method Marches             setNbrelot()            Sets the current record's "nbrelot" value
 * @method Marches             setTitulaire()          Sets the current record's "titulaire" value
 * @method Marches             setNbrebinificaire()    Sets the current record's "nbrebinificaire" value
 * @method Marches             setMntttc()             Sets the current record's "mntttc" value
 * @method Marches             setRetenuegaraentie()   Sets the current record's "retenuegaraentie" value
 * @method Marches             setCautionement()       Sets the current record's "cautionement" value
 * @method Marches             setAvance()             Sets the current record's "avance" value
 * @method Marches             setPenalite()           Sets the current record's "penalite" value
 * @method Marches             setIdPassaction()       Sets the current record's "id_passaction" value
 * @method Marches             setIdProjet()           Sets the current record's "id_projet" value
 * @method Marches             setIdNature()           Sets the current record's "id_nature" value
 * @method Marches             setIdUser()             Sets the current record's "id_user" value
 * @method Marches             setIdDocumentachat()    Sets the current record's "id_documentachat" value
 * @method Marches             setIdFrs()              Sets the current record's "id_frs" value
 * @method Marches             setDatecommencement()   Sets the current record's "datecommencement" value
 * @method Marches             setMaxpinalite()        Sets the current record's "maxpinalite" value
 * @method Marches             setProcedurepassation() Sets the current record's "Procedurepassation" value
 * @method Marches             setProjet()             Sets the current record's "Projet" value
 * @method Marches             setNaturemarche()       Sets the current record's "Naturemarche" value
 * @method Marches             setUtilisateur()        Sets the current record's "Utilisateur" value
 * @method Marches             setDocumentachat()      Sets the current record's "Documentachat" value
 * @method Marches             setFournisseur()        Sets the current record's "Fournisseur" value
 * @method Marches             setLots()               Sets the current record's "Lots" collection
 * @method Marches             setFinancement()        Sets the current record's "Financement" collection
 * 
 * @package    BmmErpTest
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMarches extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('marches');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'marches_id',
             'length' => 4,
             ));
        $this->hasColumn('numero', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('datecreation', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('delai', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('object', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('mrpme', 'string', 3, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 3,
             ));
        $this->hasColumn('nbrelot', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('titulaire', 'string', 40, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 40,
             ));
        $this->hasColumn('nbrebinificaire', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('mntttc', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('retenuegaraentie', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('cautionement', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('avance', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('penalite', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
        $this->hasColumn('id_passaction', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_projet', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_nature', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_user', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_documentachat', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_frs', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('datecommencement', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('maxpinalite', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 18,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Procedurepassation', array(
             'local' => 'id_passaction',
             'foreign' => 'id'));

        $this->hasOne('Projet', array(
             'local' => 'id_projet',
             'foreign' => 'id'));

        $this->hasOne('Naturemarche', array(
             'local' => 'id_nature',
             'foreign' => 'id'));

        $this->hasOne('Utilisateur', array(
             'local' => 'id_user',
             'foreign' => 'id'));

        $this->hasOne('Documentachat', array(
             'local' => 'id_documentachat',
             'foreign' => 'id'));

        $this->hasOne('Fournisseur', array(
             'local' => 'id_frs',
             'foreign' => 'id'));

        $this->hasMany('Lots', array(
             'local' => 'id',
             'foreign' => 'id_marche'));

        $this->hasMany('Financement', array(
             'local' => 'id',
             'foreign' => 'id_marche'));
    }
}