<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Plancomptable', 'doctrine');

/**
 * BasePlancomptable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $libelle
 * @property string $numerocompte
 * @property integer $typesolde
 * @property integer $lettrage
 * @property integer $standard
 * @property date $date
 * @property integer $id_classe
 * @property integer $id_devise
 * @property integer $id_compte
 * @property integer $id_user
 * @property integer $id_dossier
  * @property string $ensommeil
  * @property string $senspardefaut
  
 * @property Dossiercomptable $Dossiercomptable
 * @property Classecompte $Classecompte
 * @property Devise $Devise
 * @property Doctrine_Collection $Plancomptable
 * @property Utilisateur $Utilisateur
 * @property Doctrine_Collection $Dossiercomptable
 * @property Doctrine_Collection $Dossiercomptable_8
 * @property Doctrine_Collection $Dossiercomptable_9
 * @property Doctrine_Collection $Typecomptebilan
 * @property Doctrine_Collection $Journalcomptable
 * @property Doctrine_Collection $Plandossiercomptable
 * @property Doctrine_Collection $Parametrebilan
 * @property Doctrine_Collection $Parametrebilan_2
 * @property Doctrine_Collection $Souscomptejournal
 * @property Doctrine_Collection $Client
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method string              getLibelle()               Returns the current record's "libelle" value
 * @method string              getNumerocompte()         Returns the current record's "numerocompte" value
 
 * @method string              getEnsommeil()           Returns the current record's "ensommeil" value
 
  * @method string              getSenspardefaut()           Returns the current record's "senspardefaut" value
 * @method integer             getTypesolde()            Returns the current record's "typesolde" value
 * @method integer             getLettrage()             Returns the current record's "lettrage" value
 * @method integer             getStandard()             Returns the current record's "standard" value
 * @method date                getDate()                 Returns the current record's "date" value
 * @method integer             getIdClasse()             Returns the current record's "id_classe" value
 * @method integer             getIdDevise()             Returns the current record's "id_devise" value
 * @method integer             getIdCompte()             Returns the current record's "id_compte" value
 * @method integer             getIdUser()               Returns the current record's "id_user" value
 * @method integer             getIdDossier()            Returns the current record's "id_dossier" value
 * @method Dossiercomptable    getDossier()              Returns the current record's "Dossiercomptable" value
 * @method Classecompte        getClassecompte()         Returns the current record's "Classecompte" value
 * @method Devise              getDevise()               Returns the current record's "Devise" value
 * @method Doctrine_Collection getPlancomptable()        Returns the current record's "Plancomptable" collection
 * @method Utilisateur         getUtilisateur()          Returns the current record's "Utilisateur" value
 * @method Doctrine_Collection getDossiercomptable()     Returns the current record's "Dossiercomptable" collection
 * @method Doctrine_Collection getDossiercomptable8()    Returns the current record's "Dossiercomptable_8" collection
 * @method Doctrine_Collection getDossiercomptable9()    Returns the current record's "Dossiercomptable_9" collection
 * @method Doctrine_Collection getTypecomptebilan()      Returns the current record's "Typecomptebilan" collection
 * @method Doctrine_Collection getJournalcomptable()     Returns the current record's "Journalcomptable" collection
 * @method Doctrine_Collection getPlandossiercomptable() Returns the current record's "Plandossiercomptable" collection
 * @method Doctrine_Collection getParametrebilan()       Returns the current record's "Parametrebilan" collection
 * @method Doctrine_Collection getParametrebilan2()      Returns the current record's "Parametrebilan_2" collection
 * @method Doctrine_Collection getSouscomptejournal()    Returns the current record's "Souscomptejournal" collection
 * @method Doctrine_Collection getClient()               Returns the current record's "Client" collection
 * @method Plancomptable       setId()                   Sets the current record's "id" value
 * @method Plancomptable       setLibelle()               Sets the current record's "libelle" value
 * @method Plancomptable       setNumerocompte()         Sets the current record's "numerocompte" value
 * @method Plancomptable       setEnsommeil()         Sets the current record's "ensommeil" value
 
 * @method Plancomptable       setSenspardefaut()         Sets the current record's "senspardefaut" value
 * @method Plancomptable       setTypesolde()            Sets the current record's "typesolde" value
 * @method Plancomptable       setLettrage()             Sets the current record's "lettrage" value
 * @method Plancomptable       setStandard()             Sets the current record's "standard" value
 * @method Plancomptable       setDate()                 Sets the current record's "date" value
 * @method Plancomptable       setIdClasse()             Sets the current record's "id_classe" value
 * @method Plancomptable       setIdDevise()             Sets the current record's "id_devise" value
 * @method Plancomptable       setIdCompte()             Sets the current record's "id_compte" value
 * @method Plancomptable       setIdUser()               Sets the current record's "id_user" value
 * @method Plancomptable       setIdDossier()            Sets the current record's "id_dossier" value
 * @method Plancomptable       setDossier()              Sets the current record's "Dossiercomptable" value
 * @method Plancomptable       setClassecompte()         Sets the current record's "Classecompte" value
 * @method Plancomptable       setDevise()               Sets the current record's "Devise" value
 * @method Plancomptable       setPlancomptable()        Sets the current record's "Plancomptable" collection
 * @method Plancomptable       setUtilisateur()          Sets the current record's "Utilisateur" value
 * @method Plancomptable       setDossiercomptable()     Sets the current record's "Dossiercomptable" collection
 * @method Plancomptable       setDossiercomptable8()    Sets the current record's "Dossiercomptable_8" collection
 * @method Plancomptable       setDossiercomptable9()    Sets the current record's "Dossiercomptable_9" collection
 * @method Plancomptable       setTypecomptebilan()      Sets the current record's "Typecomptebilan" collection
 * @method Plancomptable       setJournalcomptable()     Sets the current record's "Journalcomptable" collection
 * @method Plancomptable       setPlandossiercomptable() Sets the current record's "Plandossiercomptable" collection
 * @method Plancomptable       setParametrebilan()       Sets the current record's "Parametrebilan" collection
 * @method Plancomptable       setParametrebilan2()      Sets the current record's "Parametrebilan_2" collection
 * @method Plancomptable       setSouscomptejournal()    Sets the current record's "Souscomptejournal" collection
 * @method Plancomptable       setClient()               Sets the current record's "Client" collection
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePlancomptable extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('plancomptable');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'plancomptable_id',
             'length' => 4,
             ));
        $this->hasColumn('libelle', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('numerocompte', 'string', 15, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 15,
             ));
			    $this->hasColumn('ensommeil', 'string', 25, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 25,
             ));
			   $this->hasColumn('senspardefaut', 'string', 255, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 255,
             ));
			 
        $this->hasColumn('typesolde', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '3',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('lettrage', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '0',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('standard', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'default' => '0',
             'primary' => false,
             'length' => 2,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_classe', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_devise', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_compte', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_user', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_dossier', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Classecompte', array(
             'local' => 'id_classe',
             'foreign' => 'id'));

        $this->hasOne('Devise', array(
             'local' => 'id_devise',
             'foreign' => 'id'));

        $this->hasMany('Plancomptable', array(
             'local' => 'id',
             'foreign' => 'id_compte'));

        $this->hasOne('Utilisateur', array(
             'local' => 'id_user',
             'foreign' => 'id'));
        
        $this->hasMany('Dossiercomptable as Dossier', array(
             'local' => 'id_dossier',
             'foreign' => 'id'));

        $this->hasMany('Dossiercomptable', array(
             'local' => 'id',
             'foreign' => 'id_compteattente'));

        $this->hasMany('Dossiercomptable as Dossiercomptable_8', array(
             'local' => 'id',
             'foreign' => 'id_comptevente'));

        $this->hasMany('Dossiercomptable as Dossiercomptable_9', array(
             'local' => 'id',
             'foreign' => 'id_compteachat'));

        $this->hasMany('Typecomptebilan', array(
             'local' => 'id',
             'foreign' => 'id_compte'));

        $this->hasMany('Journalcomptable', array(
             'local' => 'id',
             'foreign' => 'id_comptecontrepartie'));

        $this->hasMany('Plandossiercomptable', array(
             'local' => 'id',
             'foreign' => 'id_plan'));

        $this->hasMany('Parametrebilan', array(
             'local' => 'id',
             'foreign' => 'id_comptefin'));

        $this->hasMany('Parametrebilan as Parametrebilan_2', array(
             'local' => 'id',
             'foreign' => 'id_comptedebut'));
        
        $this->hasMany('Souscomptejournal', array(
             'local' => 'id',
             'foreign' => 'id_souscompte'));
        
        $this->hasMany('Client', array(
             'local' => 'id',
             'foreign' => 'id_plancomptable'));
    }
}