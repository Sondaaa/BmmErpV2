<?php

// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Plandossiercomptable', 'doctrine');

/**
 * BasePlandossiercomptable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property date $date
 * @property string $libelle
 * @property string $numerocompte
 * @property integer $typesolde
 * @property integer $lettrage
 * @property string $lettrelettrage
 * @property decimal $solde
 * @property string $ensommeil
 * @property string $senspardefaut
 * @property integer $id_devise
 * @property decimal $soldeouv
 * @property integer $id_dossier
 * @property integer $id_exercice
 * @property integer $id_plan
 * @property Dossiercomptable $Dossiercomptable
 * @property Plancomptable $Plancomptable
 * @property Exercice $Exercice
 * @property Doctrine_Collection $Lignepiececomptable
 * @property Doctrine_Collection $Lignepiececomptable_3
 * 
 * @method integer              getId()                    Returns the current record's "id" value
 * @method date                 getDate()                  Returns the current record's "date" value
 * @method string               getLibelle()               Returns the current record's "libelle" value
 * @method string               getNumerocompte()          Returns the current record's "numerocompte" value
 * @method integer              getTypesolde()             Returns the current record's "typesolde" value
 * @method integer              getLettrage()              Returns the current record's "lettrage" value
 * @method string               getLettrelettrage()        Returns the current record's "lettrelettrage" value
 * @method decimal              getSolde()                 Returns the current record's "solde" value
 * @method string              getEnsommeil()           Returns the current record's "ensommeil" value
 * @method string               getSenspardefaut()          Returns the current record's "senspardefaut" value
 * @method integer              getIdDevise()               Returns the current record's "id_devise" value
 * @method decimal              getSoldeouv()              Returns the current record's "soldeouv" value
 * @method integer              getIdExercice()            Returns the current record's "id_exercice" value
 * @method integer              getIdDossier()             Returns the current record's "id_dossier" value
 * @method integer              getIdPlan()                Returns the current record's "id_plan" value
 * @method Dossiercomptable     getDossiercomptable()      Returns the current record's "Dossiercomptable" value
 * @method Exercice             getExercice()              Returns the current record's "Exercice" value
 * @method Plancomptable        getPlancomptable()         Returns the current record's "Plancomptable" value
 * @method Doctrine_Collection  getLignepiececomptable()   Returns the current record's "Lignepiececomptable" collection
 * @method Doctrine_Collection  getLignepiececomptable3()  Returns the current record's "Lignepiececomptable_3" collection
 * @method Plandossiercomptable setId()                    Sets the current record's "id" value
 * @method Plandossiercomptable setDate()                  Sets the current record's "date" value
 * @method Plandossiercomptable setLibelle()               Sets the current record's "libelle" value
 * @method Plandossiercomptable setNumerocompte()          Sets the current record's "numerocompte" value
 * @method Plandossiercomptable setTypesolde()             Sets the current record's "typesolde" value
 * @method Plandossiercomptable setLettrage()              Sets the current record's "lettrage" value
 * @method Plandossiercomptable setLettrelettrage()        Sets the current record's "lettrelettrage" value
 * @method Plandossiercomptable setSolde()                 Sets the current record's "solde" value
 * @method Plancomptable       setEnsommeil()         Sets the current record's "ensommeil" value
 * @method Plandossiercomptable setSenspardefaut()          Sets the current record's "senspardefaut" value
 * @method Plandossiercomptable setIdDevise()               Sets the current record's "id_devise" value
 * @method Plandossiercomptable setSoldeouv()                 Sets the current record's "soldeouv" value
 * @method Plandossiercomptable setIdDossier()             Sets the current record's "id_dossier" value
 * @method Plandossiercomptable setIdExercice()            Sets the current record's "id_exercice" value
 * @method Plandossiercomptable setIdPlan()                Sets the current record's "id_plan" value
 * @method Plandossiercomptable setDossiercomptable()      Sets the current record's "Dossiercomptable" value
 * @method Plandossiercomptable setExercice()              Sets the current record's "Exercice" value
 * @method Plandossiercomptable setPlancomptable()         Sets the current record's "Plancomptable" value
 * @method Plandossiercomptable setLignepiececomptable()   Sets the current record's "Lignepiececomptable" collection
 * @method Plandossiercomptable setLignepiececomptable3()  Sets the current record's "Lignepiececomptable_3" collection
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePlandossiercomptable extends sfDoctrineRecord {

    public function setTableDefinition() {
        $this->setTableName('plandossiercomptable');
        $this->hasColumn('id', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'primary' => true,
            'sequence' => 'plandossiercomptable_id',
            'length' => 4,
        ));
        $this->hasColumn('date', 'date', 25, array(
            'type' => 'date',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'primary' => false,
            'length' => 25,
        ));
        $this->hasColumn('libelle', 'string', null, array(
            'type' => 'string',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'primary' => false,
            'length' => '',
        ));
        $this->hasColumn('numerocompte', 'string', 15, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => true,
            'primary' => false,
            'length' => 15,
        ));
        $this->hasColumn('typesolde', 'integer', 2, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => '3',
            'primary' => false,
            'length' => 2,
        ));
        $this->hasColumn('lettrage', 'integer', 2, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => '0',
            'primary' => false,
            'length' => 2,
        ));
        $this->hasColumn('lettrelettrage', 'string', 10, array(
            'type' => 'string',
            'fixed' => 1,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 10,
        ));
        $this->hasColumn('solde', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => '0',
            'primary' => false,
            'length' => 18,
        ));
		
		 $this->hasColumn('soldeouv', 'decimal', 18, array(
            'type' => 'decimal',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => true,
            'default' => '0',
            'primary' => false,
            'length' => 18,
        ));
        $this->hasColumn('id_dossier', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_exercice', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
        $this->hasColumn('id_plan', 'integer', 4, array(
            'type' => 'integer',
            'fixed' => 0,
            'unsigned' => false,
            'notnull' => false,
            'primary' => false,
            'length' => 4,
        ));
		 $this->hasColumn('ensommeil', 'string', 25, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 25,
             ));
		$this->hasColumn('senspardefaut', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('id_devise', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasOne('Dossiercomptable', array(
            'local' => 'id_dossier',
            'foreign' => 'id'));
        
        $this->hasOne('Exercice', array(
            'local' => 'id_exercice',
            'foreign' => 'id'));

        $this->hasOne('Plancomptable', array(
            'local' => 'id_plan',
            'foreign' => 'id'));

        $this->hasMany('Lignepiececomptable', array(
            'local' => 'id',
            'foreign' => 'id_comptecomptable'));

        $this->hasMany('Lignepiececomptable as Lignepiececomptable_3', array(
            'local' => 'id',
            'foreign' => 'id_contrepartie'));
        
        $this->hasMany('Parametrebilancompte as Parametrebilancompte', array(
            'local' => 'id',
            'foreign' => 'id_compte'));
    }

}
