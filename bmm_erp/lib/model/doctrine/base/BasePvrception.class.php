<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Pvrception', 'doctrine');

/**
 * BasePvrception
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property date $datepvrecptionprovisoire
 * @property string $observation
 * @property string $typepv
 * @property string $urldocumentscan
 * @property string $piecejojnt
 * @property date $datereceptiondef
 * @property integer $id_lots
 * @property string $id_user
 * @property string $reserve
 * @property Lots $Lots
 * @property Doctrine_Collection $Piecejoint
 * 
 * @method integer             getId()                       Returns the current record's "id" value
 * @method date                getDatepvrecptionprovisoire() Returns the current record's "datepvrecptionprovisoire" value
 * @method string              getObservation()              Returns the current record's "observation" value
 * @method string              getTypepv()                   Returns the current record's "typepv" value
 * @method string              getUrldocumentscan()          Returns the current record's "urldocumentscan" value
 * @method string              getPiecejojnt()               Returns the current record's "piecejojnt" value
 * @method date                getDatereceptiondef()         Returns the current record's "datereceptiondef" value
 * @method integer             getIdLots()                   Returns the current record's "id_lots" value
 * @method string              getIdUser()                   Returns the current record's "id_user" value
 * @method string              getReserve()                  Returns the current record's "reserve" value
 * @method Lots                getLots()                     Returns the current record's "Lots" value
 * @method Doctrine_Collection getPiecejoint()               Returns the current record's "Piecejoint" collection
 * @method Pvrception          setId()                       Sets the current record's "id" value
 * @method Pvrception          setDatepvrecptionprovisoire() Sets the current record's "datepvrecptionprovisoire" value
 * @method Pvrception          setObservation()              Sets the current record's "observation" value
 * @method Pvrception          setTypepv()                   Sets the current record's "typepv" value
 * @method Pvrception          setUrldocumentscan()          Sets the current record's "urldocumentscan" value
 * @method Pvrception          setPiecejojnt()               Sets the current record's "piecejojnt" value
 * @method Pvrception          setDatereceptiondef()         Sets the current record's "datereceptiondef" value
 * @method Pvrception          setIdLots()                   Sets the current record's "id_lots" value
 * @method Pvrception          setIdUser()                   Sets the current record's "id_user" value
 * @method Pvrception          setReserve()                  Sets the current record's "reserve" value
 * @method Pvrception          setLots()                     Sets the current record's "Lots" value
 * @method Pvrception          setPiecejoint()               Sets the current record's "Piecejoint" collection
 * 
 * @package    Bmm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePvrception extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('pvrception');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'pvrception_id',
             'length' => 4,
             ));
        $this->hasColumn('datepvrecptionprovisoire', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('observation', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('typepv', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('urldocumentscan', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('piecejojnt', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('datereceptiondef', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('id_lots', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_user', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('reserve', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Lots', array(
             'local' => 'id_lots',
             'foreign' => 'id'));

        $this->hasMany('Piecejoint', array(
             'local' => 'id',
             'foreign' => 'id_pvreceptionmarche'));
    }
}