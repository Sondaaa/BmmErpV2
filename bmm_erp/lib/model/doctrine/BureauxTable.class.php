<?php

/**
 * BureauxTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BureauxTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object BureauxTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Bureaux');
    }
    public function getBureauxSousSite()
    {
        $_user = sfContext::getInstance()->getUser()->UserConnected();
        $user = UtilisateurTable::getInstance()->findOneById($_user->getId());
        if ($user && !$user->getIsAdmin()) {
            $labo = $user->getLaboName();
            if ($labo) {
                $q = $this->createQuery('d')
                    ->where('id_etage=' . $labo->getId())
                    ->execute();
                return $q;
            }
        }
        if ($user && $user->getIsAdmin()) {
            $labo = $user->getAdministartionSite();
            if ($labo) {
                $q = $this->createQuery('d')
                    ->where('id_etage=' . $labo->getId())
                    ->execute();
                return $q;
            }
        }
        return [];
    }
    
    public function getByIdEtage($id_etage)
    {      
            if ($id_etage) {
                $q = $this->createQuery('d')
                    ->where('id_etage=' . $id_etage)
                    ->execute();
                return $q;
            }
       
    }
    public function getByIdSite($id_site)
    {      
            if ($id_site) {
                $q = $this->createQuery('d')
                    ->where('id_site=' . $id_site)
                    ->execute();
                return $q;
            }
       
    }
    public function getById($id)
    {
        $q = $this->createQuery('d');
        if ($id) {
            $q = $q->where('id=' . $id)
                ->execute();
        }
        return $q;
    }
    public function findByLaboUser()
    {
        $_user = sfContext::getInstance()->getUser()->UserConnected();
        $user = UtilisateurTable::getInstance()->findOneById($_user->getId());
        if ($user->getIdMagasin() || $user->getIdLabo()) {
            $labo_id = json_decode($user->getIdLabo());
            if (!$labo_id) {
                $labo_id = json_decode($user->getIdMagasin());
            }
        }
        if ($user) {
            $q = $this->createQuery('d');
            if ($labo_id) {
                $q = $q->whereIn('id_etage', $labo_id)
                    ->execute();

            }
            return $q;
        }
    }
}
