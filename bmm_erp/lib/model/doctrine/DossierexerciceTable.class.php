<?php

/**
 * DossierexerciceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DossierexerciceTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object DossierexerciceTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Dossierexercice');
    }

     public function findAllByDossier() {
        $q =  $this->createQuery('a')
                ->select('id_exercice ')
                ->from('dossierexercice')
                ->groupBy('id_dossier')
                ->limit('1')
                ;

        return $q->execute();
    }
    public function findAllAnterieur() {
        $q = $this->createQuery('a')
                ->leftJoin('a.Exercice ex')
                ->orderBy('ex.libelle desc');

        return $q;
    }

    public function getByExerciceAndDosier($exercice, $dossier) {
        $query = $this->createQuery('d')
                ->where('d.id_exercice = ' . $exercice)
                ->andWhere('d.id_dossier = ' . $dossier);
        return $query->execute();
    }

    public function findOneByIdDossier($id) {
        $query = " select dossierexercice.id as id"
                . " from dossierexercice"
                . " where dossierexercice.id_dossier=" . $id . ""
        ;



        $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
        $listedocsD = $conn->fetchAssoc($query);
        return json_encode($listedocsD);
    }

    //delete bydossier

    public function deleteByDossier($id) {
        $query = $this->createQuery('dos')
                ->delete()
                ->from('dossierexercice dos')
                ->where('dos.id_dossier = ' . $id);
        return $query->execute();
    }

    public function load($dossier = '', $exercice = '', $cloture = '') {
        $query = $this->createQuery('d')
                ->leftJoin('d.Exercice ex');

        if ($dossier != '') {
            $query = $query->andWhere("UPPER(d.Dossiercomptable.code) LIKE '%" . strtoupper($dossier) . "%' OR UPPER(d.Dossiercomptable.raisonsociale) LIKE '%" . strtoupper($dossier) . "%'");
        }
        if ($exercice != '') {
            $query = $query->andWhere("UPPER(d.Exercice.libelle) LIKE '%" . strtoupper($exercice) . "%'");
        }

        if ($cloture != '') {
            if ($cloture == 1)
                $query = $query->andWhere("d.cloture = true");
            else
                $query = $query->andWhere("d.cloture = false");
        }

        $query = $query->orderBy('ex.libelle desc');

        return $query;
    }

    public function getByDossierAndExercice($dossier, $exercice) {
        $query = $this->createQuery('d')
                ->where('d.id_exercice = ' . $exercice)
                ->andWhere('d.id_dossier = ' . $dossier);
        return $query->execute();
    }

    public function getByDossier($dossier) {
        $q = $this->createQuery('a')
                ->leftJoin('a.Exercice ex')
                ->where('a.id_dossier = ' . $dossier)
                ->orderBy('ex.libelle desc');

        return $q->execute();
    }

    public function getIdExercice($dossier, $annee) {
        $q = $this->createQuery('a')
                ->leftJoin('a.Exercice ex')
                ->where('a.id_dossier = ' . $dossier)
                ->andWhere("ex.libelle='" . trim($annee) . "'")
        ;

        return $q->execute();
    }

    public function getByAnneAndDossier($annee, $dossier) {
        $q = $this->createQuery('a')
                ->leftJoin('a.Exercice ex')
                ->where('a.id_dossier = ' . $dossier)
                ->andWhere("ex.libelle='" . trim($annee) . "'")
        ;

        return $q->execute();
    }

}
