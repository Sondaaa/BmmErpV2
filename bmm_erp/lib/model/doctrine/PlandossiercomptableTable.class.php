<?php

/**
 * PlandossiercomptableTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PlandossiercomptableTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object PlandossiercomptableTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Plandossiercomptable');
    }

    public function getByListeCompte($compte_comptable, $compte_charge) {
//        $compte=array($compte_comptable,$compte_charge);
        array_push($compte_comptable, $compte_charge);
//        die(json_encode($compte_comptable));
        $q = $this->createQuery('p')
                ->whereIn('trim(p.numerocompte)', (array) $compte_comptable)
//                ->orWhereNotIn('trim(p.numerocompte)', (array) $compte_charge)
                ->andWhere('p.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id'])
        ;
//        die($q);
        return $q->execute();
//        die($q);
    }

    public function getByListeCompteClient($compte_comptable) {
        $q = $this->createQuery('p')
                ->whereIn('trim(p.numerocompte)', (array) $compte_comptable)
                ->andWhere('p.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('p.id_exercice = ?', $_SESSION['exercice_id'])
        ;
        return $q->execute();
    }

    public function getclient($compte = '') {
        $q = $this->createQuery('pdc')
                ->select('pdc.*')
                ->from('Plandossiercomptable pdc')
                ->where('pdc.id_plan = ?', $compte)
                ->andWhere('pdc.id not in (select id_comptecomptable from lignepiececomptable  ) ')
//                ->andWhere('(pdc.id != parametrebilan.id_comptedebut  or  pdc.id != parametrebilan.id_comptefin)')
//                ->andWhere('pdc.id not in (select id_comptedebut from  parametrebilan where parametrebilan.id_comptedebut=pdc.id)
//			  or pdc.id not in (select id_comptefin from  parametrebilan where parametrebilan.id_comptefin=pdc.id)')
                ->andWhere('(pdc.id not in (select id_comptedebut from  parametrebilan ))')
                ->andWhere('pdc.id_exercice=' . $_SESSION['exercice_id'])
                ->limit(1);
        return $q->execute();
    }

    public function findByNumeroCompte($compte = '') {
        $q = $this->createQuery('pdc')
                ->select('pdc.*')
                ->from('Plandossiercomptable pdc')
                ->where('trim(pdc.numerocompte) = ?', $compte);

        return $q->execute();
    }

    public function getbyNumAndNotInClass6and7($compte = '') {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id= ' . $compte)
                ->andWhere('pc.id_classe <> 6')
                ->andWhere('pc.id_classe <> 7')
        ;
        return $q->execute();
    }

    /*
     * Insertion plan dossier commtable standart
     */

    public function InsertQueryArrayStandart($id_dossier, $id_exercice, $id_exercice_ant) {
        $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
        $query = "INSERT INTO plandossiercomptable(
	date, libelle, numerocompte, typesolde,  solde, id_dossier, id_plan, id_exercice)
	select CURRENT_DATE,libelle,numerocompte,typesolde,0," . $id_dossier . " as id_dossier,id_plan," . $id_exercice . " as id_execrice
	from plandossiercomptable where id_dossier=" . $id_dossier . " and id_exercice=" . $id_exercice_ant . ";";
        $conn->execute($query);
    }

    public function findByCompteIdOrderNumero($compte_id = '') {
        $q = $this->createQuery('pdc')
                ->select('pdc.*')
                ->from('Plandossiercomptable pdc')
                ->leftJoin('pdc.Plancomptable pc')
                ->where('pc.id_compte = ?', $compte_id)
                ->orderBy('pc.numerocompte');

        return $q->execute();
    }

    public function getPlanComptableOrderByNumero($dossier_id, $exercice_id) {
        $query = $this->createQuery('p');
        $query->select('pd.id as id, pd.id as p_id, pd.numerocompte as numerocompte, pd.libelle as libelle, p.standard as standard, pd.date as date, c.libelle as libellecompte')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->leftJoin('p.Classecompte c')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id)
                ->andWhere('LENGTH(trim(pd.numerocompte)) >= 7')
                ->andWhere('pd.id in (select id_comptecomptable from lignepiececomptable 
                 where pd.id=lignepiececomptable.id_comptecomptable
                 and ( lignepiececomptable.montantdebit <> 0.000 or lignepiececomptable.montantcredit <> 0.00 ) ) ')
                //                ->andWhere('p.ensommeil = ' . "'0' or p.ensommeil is null")
                ->orderBy('pd.numerocompte');

        return $query->execute();
    }

    public function findByIdAndDossierAndExercice($id, $dossier_id, $exercice_id) {

        $query = $this->createQuery('p');
        $query->select('p.*')
//                ->from('Plandossiercomptable pd')
                ->leftJoin('p.Plancomptable pl')
                ->leftJoin('pl.Classecompte c')
                ->where('p.id_dossier = ' . $dossier_id)
                ->andWhere('p.id_exercice = ' . $exercice_id)
                ->andWhere('p.id = ' . $id)
                ->andWhere('LENGTH(trim(p.numerocompte)) >= 7')
//                ->andWhere('p.ensommeil = ' . "'0' or p.ensommeil is null")
                ->orderBy('p.numerocompte');

        return $query->execute();
    }

    public function findByNumerocompteAndDossierAndExercice($code, $dossier_id, $exercice_id) {
        $query = $this->createQuery('p');
        $query->select('pd.id as id, pd.id as p_id, pd.numerocompte as numerocompte, pd.libelle as libelle, p.standard as standard, pd.date as date, c.libelle as libellecompte')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->leftJoin('p.Classecompte c')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id)
                ->andWhere("trim(pd.numerocompte) = '" . trim($code) . "'")
                ->andWhere('LENGTH(trim(pd.numerocompte)) >= 7')
//                ->andWhere('p.ensommeil = ' . "'0' or p.ensommeil is null")
                ->orderBy('pd.numerocompte');

        return $query->execute();
    }

    public function getByPlanDossieExercice($id_plan, $dossier_id, $exercice_id) {

        $query = $this->createQuery('p');
        $query->select('p.*')
//                ->from('Plandossiercomptable pd')
                ->leftJoin('p.Plancomptable pl')
                ->leftJoin('pl.Classecompte c')
                ->where('p.id_dossier = ' . $dossier_id)
                ->andWhere('p.id_exercice = ' . $exercice_id)
                ->andWhere('p.id_plan = ' . $id_plan)
                ->andWhere('LENGTH(trim(p.numerocompte)) >= 7')
//                ->andWhere('p.ensommeil = ' . "'0' or p.ensommeil is null")
                ->orderBy('p.numerocompte');

        return $query->execute();
    }

    public function getPlanComptableMinchiffreOrderByNumero($dossier_id, $exercice_id) {
        $query = $this->createQuery('p');
        $query->select('pd.id as id, pd.id as p_id,'
                        . ' pd.numerocompte as numerocompte, pd.libelle as libelle, '
                        . 'p.standard as standard, pd.date as date, c.libelle as libellecompte'
                        . ' pd.solde as solde , pd.typesolde as typesolde')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->leftJoin('p.Classecompte c')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id)
                ->andWhere('LENGTH(trim(pd.numerocompte)) >= 7')
//                ->andWhere('pd.id_exercice=' . $exercice_id)
                ->orderBy('pd.numerocompte');
        return $query->execute();
    }

    public function getBalance($dossier_id, $exercice_id) {
//        die('id_d'.$dossier_id.'id_e'.$exercice_id);
        $query = $this->createQuery('p');
        $query->select('pd.id as id, pd.id as p_id, pd.numerocompte as numerocompte, pd.libelle as libelle, '
                        . 'p.standard as standard, pd.date as date, c.libelle as libellecompte,'
                        . ' pd.solde as solde , pd.typesolde as typesolde')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->leftJoin('p.Classecompte c')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id)
                ->andWhere('LENGTH(trim(pd.numerocompte)) >= 7')
//                ->andWhere('pd.solde is not null  and pd.solde != ' . '0.000')
                ->orderBy('pd.numerocompte');
        return $query->execute();
    }

    public function findOrderByNumero() {
        $query = $this->createQuery('p');
        $query->select('p.*')
                ->from('Plandossiercomptable p')
                ->where('p.id_dossier=' . $_SESSION['dossier_id'])
                ->andWhere('p.id_exercice = ' . $_SESSION['exercice_id'])
                ->orderBy('p.numerocompte');
        return $query->execute();
    }

    public function findOrderByNumeroTiers($dossier_id, $exercice_id) {
        $query = $this->createQuery('pd');
        $query->select('pd.*')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id)
                ->andWhere('p.id_classe = 4')
//                ->andWhere("(trim(pd.numerocompte) = '40' OR trim(pd.numerocompte) = '41')")
                ->orderBy('pd.numerocompte');
        return $query->execute();
    }

    public function findByJournalOrderByNumero($id) {
        $query = $this->createQuery('pd');
        $query->select('pd.id as id, pd.numerocompte as numerocompte, pd.libelle as libelle')
                ->from('Plandossiercomptable pd')
                ->leftJoin('pd.Plancomptable p')
                ->leftJoin('p.Souscomptejournal s')
                ->where('s.id_journal = ' . $id)
                ->orderBy('p.numerocompte');
        return $query->execute();
    }

    public function loadByInterval($compte_min, $compte_max, $dossier_id, $exercice_id) {

        $q = $this->createQuery('c')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
        if (isset($compte_min))
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if (isset($compte_max))
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));
        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadByIntervalNvMethode($compte_min, $compte_max, $dossier_id, $exercice_id) {

        $q = $this->createQuery('c')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
        if (isset($compte_min))
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if (isset($compte_max))
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));
        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadByIntervalCompta($compte_min = '', $compte_max = '') {
        $q = $this->createQuery('c')
                ->where('c.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('c.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7')
                ->andWhere('c.id not in (select id_comptecomptable from lignepiececomptable  ) ')
//                 ->andWhere('(c.id not in (select id_comptedebut from  parametrebilan  ))')
        ;
        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadByIntervalEtBalance($compte_min = '', $compte_max = '', $dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('c.solde is not null and c.solde != ' . '0.000');

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadByIntervalForFicheCompte($compte_min = '', $compte_max = '', $dossier_id, $exercice_id, $date_debut, $date_fin, $crediteur, $debiteur, $solde) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Lignepiececomptable l')
                ->leftJoin('l.Piececomptable p')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id);

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        if ($date_debut != '')
            $q->andWhere('p.date >= ?', $date_debut);
        if ($date_fin != '')
            $q->andWhere('p.date <= ?', $date_fin);

        if ($crediteur == 'true')
            $q->andWhere('c.solde > ?', 0);
        if ($debiteur == 'true')
            $q->andWhere('c.solde < ?', 0);
        if ($solde == 'true')
            $q->andWhere('c.solde = ?', 0);

        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadEtatBalance($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $chiffre_1, $chiffre_2, $chiffre_3, $chiffre_4, $chiffre_5, $chiffre_6, $chiffre_7, $dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id);

        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

//        $chiffre = '(LENGTH(trim(c.numerocompte)) = 8';
//
//
//        if ($chiffre_2 == 'true')
//            $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 2';
////        $chiffre = $chiffre . " OR LENGTH(trim(REPLACE(RTRIM(REPLACE(trim(c.numerocompte), '0', ' ')),' ','0'))) = 2";
//
//        if ($chiffre_3 == 'true')
//            $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 3';
//
//        if ($chiffre_4 == 'true')
//            $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 4';
//
//        if ($chiffre_5 == 'true')
//            if ($chiffre != '(')
//                $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 5';
//
//        if ($chiffre_6 == 'true')
//            $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 6';
//
//        if ($chiffre_7 == 'true')
//            $chiffre = $chiffre . ' OR LENGTH(trim(c.numerocompte)) = 7';
//
//        $chiffre = $chiffre . ')';
//
//        $q->andWhere($chiffre);
//        $q->orWhere("(trim(c.numerocompte) = '40' AND c.id_exercice = " . $exercice_id . ") OR (trim(c.numerocompte) = '41' AND c.id_exercice = " . $exercice_id . ")");
        $q->orderBy('trim(c.numerocompte), LENGTH(trim(c.numerocompte)) desc, pc.id_classe');

        return $q->execute();
    }

    public function loadEtatBalance2($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id);

        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));
        $q->orderBy('trim(c.numerocompte), LENGTH(trim(c.numerocompte)) desc, pc.id_classe');

        return $q->execute();
    }

    public function loadEtatBalanceTotaux($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7')
        ;

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);
        $q->orderBy('trim(c.numerocompte), LENGTH(trim(c.numerocompte)) desc, pc.id_classe');
        //  die($q->execute());    
        return $q->execute();
    }

    public function loadEtatBalanceTotauxTT($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $dossier_id, $exercice_id) {
//     die($exercice_id.'cc'.$dossier_id.'  '.$compte_min.' '.$compte_max) ;  
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7')
                ->andWhere(' c.solde <> ' . 0);
        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);
        $q->orderBy('trim(c.numerocompte), LENGTH(trim(c.numerocompte)) desc, pc.id_classe');
//          die(json_encode($q->execute()));    
        return $q->execute();
    }

    public function loadEtatBalanceTotaux2($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7')
        ;

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));

        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);
        $q->orderBy('trim(c.numerocompte), LENGTH(trim(c.numerocompte)) desc, pc.id_classe');
//          die($q);    
        return $q->execute();
    }

    public function loadEtatBalanceCompteTotaux($compte_min = '', $compte_max = '', $dossier_id = '', $exercice_id = '') {
        $q = $this->createQuery('c')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');

        if ($compte_min != '')
            $q->andWhere('c.numerocompte >= ?', $compte_min);
        if ($compte_max != '')
            $q->andWhere('c.numerocompte <= ?', $compte_max);

        $q->andWhere('CHAR_LENGTH(c.numerocompte) = 2');
        $q->orderBy('c.numerocompte');

        return $q->execute();
    }

    public function loadEtatBalanceTiers($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $dossier_id = '', $exercice_id = '') {
        $q = $this->createQuery('c')
                ->select('c.*, coalesce(SUM(l.montantdebit),0) AS total_debit, coalesce(SUM(l.montantcredit),0) AS total_credit')
                ->leftJoin('c.Lignepiececomptable l')
                ->leftJoin('l.Piececomptable pc')
                ->leftJoin('pc.Journalcomptable j')
                ->leftJoin('c.Plancomptable plancomp')
                ->where('j.id_type_journal <> ?', 4)
                ->andWhere('pc.date >= ?', $date_debut)
                ->andWhere('pc.date <= ?', $date_fin)
                ->andWhere('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');

        if ($compte_min != '')
            $q->andWhere('trim(c.numerocompte) >= ?', trim($compte_min));
        if ($compte_max != '')
            $q->andWhere('trim(c.numerocompte) <= ?', trim($compte_max));
        if ($comptes_non_solde == 'true')
            $q->andWhere('c.solde = ?', 0);
        $q->groupBy('c.id, plancomp.id_classe');
        $q->orderBy('c.numerocompte, LENGTH(trim(c.numerocompte)) desc, plancomp.id_classe');

        return $q->execute();
    }

    public function loadEtatBalanceSousCompte($compte_min = '', $compte_max = '', $date_debut = '', $date_fin = '', $comptes_non_solde = '', $order = '', $chiffre_1, $chiffre_2, $chiffre_3, $chiffre_4, $chiffre_5, $chiffre_6, $chiffre_7, $dossier_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');

        if ($compte_min != '')
            $q->andWhere('c.numerocompte >= ?', $compte_min);
        if ($compte_max != '')
            $q->andWhere('c.numerocompte <= ?', $compte_max);
        if ($date_debut != '')
            $q->andWhere('c.date >= ?', $date_debut);
        if ($date_fin != '')
            $q->andWhere('c.date <= ?', $date_fin);
        if ($comptes_non_solde == 'false')
            $q->andWhere('c.solde <> ?', 0);

        $q->orderBy('c.numerocompte, LENGTH(c.numerocompte) desc, pc.id_classe');

        return $q->execute();
    }

    public function loadReportNouveau($dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('pc.id_classe <> ?', 6)
                ->andWhere('pc.id_classe <> ?', 7);
        if ($_SESSION['dossier_id'] != 1) {
            $q = $q->andWhere("pc.numerocompte like '13" . "%'");
        }
        $q = $q->orderBy('pc.numerocompte');

        return $q->execute();
    }

    public function getCompteForReportNouveau($dossier_id, $exercice_id) {
        $query = $this->createQuery('c')
                ->select('c.*, SUM(l.montantdebit) as total_debit,'
                        . ' SUM(l.montantcredit) as total_credit')
                ->leftJoin('c.Lignepiececomptable l')
                ->leftJoin('l.Piececomptable pc')
                ->leftJoin('pc.Journalcomptable j')
                ->leftJoin('c.Plancomptable plc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('j.id_type_journal <> ?', 4)
                ->andWhere('plc.id_classe != ?', 6)
                ->andWhere('plc.id_classe != ?', 7)
                ->having('SUM(l.montantdebit) != SUM(l.montantcredit)')
                ->andWhere(' length(c.numerocompte)>=7')
                ->groupBy('c.id');

        return $query->execute();
    }

    public function loadByParametreId($parametre_id) {
        $q = $this->createQuery('pdc')
                ->leftJoin('pdc.Parametrebilancompte p')
                ->where('p.id_parametrebilan = ?', $parametre_id)
                ->andWhere('LENGTH(trim(pdc.numerocompte)) >= 7')
                ->orderBy('pdc.numerocompte');

        return $q->execute();
    }

    public function getCountPlanComptable($dossier_id, $exercice_id) {
        $query = $this->createQuery('p');
        $query->select('count(*) as total')
                ->from('Plandossiercomptable pd')
                ->where('pd.id_dossier = ' . $dossier_id)
                ->andWhere('pd.id_exercice = ' . $exercice_id);
        return $query->execute()->getFirst();
    }

    public function getFilsByExerciceAndByCompte($exercice_id, $numero) {
        $q = $this->createQuery('c')
//                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) = 2')
                ->andWhere("trim(c.numerocompte) LIKE '" . trim($numero) . "%'");

        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

    public function findByNumerocompteAndIdDossier($code, $id_dossier) {
        $q = $this->createQuery('c')
//                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_dossier = ?', $id_dossier)
                ->andWhere("trim(c.numerocompte) = '" . trim($code) . "%'");

        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

    public function loadEtatResultatTotaux($dossier_id, $exercice_id) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier_id)
                ->andWhere('c.id_exercice = ?', $exercice_id)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7')
                ->andWhere('pc.id_classe in ( 6 , 7 ) ');
        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

    public function getCompte($id_plan) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('c.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere('c.id_plan=' . $id_plan)
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
//                ->andWhere('pc.id_classe in ( 6 , 7 ) ' );
        $q->orderBy('trim(c.numerocompte)');
        //  die($q->execute());    
        return $q->execute();
    }

    public function getByDossierAndExercice($exercice, $dossier) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('c.id_exercice = ?', $exercice)
                ->andWhere('c.id_plan=pc.id')
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

    public function getByNumeroAndDossierAndExercice($compte, $dossier, $exercice) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $dossier)
                ->andWhere('c.id_exercice = ?', $exercice)
                ->andWhere("c.numerocompte='" . trim($compte) . "'")
                ->andWhere('c.id_plan=pc.id')
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

    public function findCompteDossier($compte) {
        $q = $this->createQuery('c')
                ->leftJoin('c.Plancomptable pc')
                ->where('c.id_dossier = ?', $_SESSION['dossier_id'])
                ->andWhere('c.id_exercice = ?', $_SESSION['exercice_id'])
                ->andWhere("c.id_plan='" . $compte . "'")
                ->andWhere('c.id_plan=pc.id')
                ->andWhere('LENGTH(trim(c.numerocompte)) >= 7');
        $q->orderBy('trim(c.numerocompte)');

        return $q->execute();
    }

}
