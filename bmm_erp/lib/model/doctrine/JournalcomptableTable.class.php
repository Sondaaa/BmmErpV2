<?php

/**
 * JournalcomptableTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class JournalcomptableTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object JournalcomptableTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Journalcomptable');
    }

    public function getAllByDossierAndExercice($dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->orderBy('j.libelle');
        return $q->execute();
    }
    public function InsertQueryArrayStandart($id_dossier,$id_exercice,$id_exercice_ant,$date_d,$date_f) 
    {
          $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
            $query = "INSERT INTO public.journalcomptable(
	 code, libelle, numerotation, issimule, isintegrer, date, iscloture, datedebutcloture, datefincloture, isbloque, isvalide, id_type_journal, id_comptecontrepartie, id_dossier, id_exercice)
	select code, libelle, numerotation, issimule, isintegrer, current_date as date, 0 iscloture, '".$date_d."' as datedebutcloture, '".$date_f."' as datefincloture,
            0 as isbloque,0 as  isvalide,  id_type_journal, id_comptecontrepartie, id_dossier, ".$id_exercice." as id_exercice
	from journalcomptable where id_dossier=".$id_dossier." and id_exercice=".$id_exercice_ant;
             $conn->execute($query);
            
    }
    public function getAllByDossierAndExerciceHavingSerie($dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
//                ->andWhere('j.numerotation = 2')
                ->orderBy('j.libelle');
        return $q->execute();
    }

    public function load($code, $libelle, $type_journal, $exercice) {
        $query = $this->createQuery('j');
        $query->select('j.*')
                ->from('Journalcomptable j')
                ->where('j.id_dossier = ?', $_SESSION['dossier_id']);

        if ($code != '')
            $query->andWhere("UPPER(j.code) LIKE '%" . $code . "%'");

        if ($libelle != '')
            $query->andWhere("UPPER(j.libelle) LIKE '%" . $libelle . "%'");

        if ($type_journal != '0')
            $query->andWhere("j.id_type_journal =" . $type_journal);

//        if ($exercice != '0')
            $query->andWhere("j.id_exercice =" . $_SESSION['exercice_id']);

        $query->orderBy('j.date desc');
        return $query;
    }

    public function loadByInterval($date_debut_journal = '', $date_fin_journal = '', $dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id);

        if ($date_debut_journal != '')
            $q->andWhere('j.datedebutcloture <= ?', $date_debut_journal);
        if ($date_fin_journal != '')
            $q->andWhere('j.datefincloture >= ?', $date_fin_journal);
        $q->groupBy('j.id');

        return $q->execute();
    }

    public function getRan($dossier_id = '', $exercice_id = '') {
        $q = $this->createQuery('j')
                ->leftJoin('j.Typejournal t')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->andWhere("(UPPER(t.libelle) = 'RAN' OR UPPER(t.libelle) = 'OUVERTURE')");
        return $q->execute();
    }

    public function getAllSaufRan($dossier_id = '', $exercice_id = '') {
        $q = $this->createQuery('j')
                ->leftJoin('j.Typejournal t')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->andWhere("((trim(t.libelle) <> 'RAN' AND UPPER(t.libelle) <> 'OUVERTURE') OR j.id_type_journal IS NULL)");
        return $q->execute();
    }

    public function findByLibelleTypeAndIdDossierAndIdExercice($libelle, $dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->leftJoin('j.Typejournal t')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->andWhere("trim(t.libelle) =?", trim($libelle))
                  ;
        return $q->execute();
    }

    public function findByLibelleTresorerieTypeAndDossierAndExercice($libelle,$libelle_1, $dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->leftJoin('j.Typejournal t')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->andWhere("trim(t.libelle) <> ?", trim($libelle))
               ->andWhere("((trim(t.libelle) <> 'RAN' AND UPPER(t.libelle) <> 'OUVERTURE'))")
                 ->andWhere("((trim(t.libelle) <> 'PAIE' AND UPPER(t.libelle) <> 'OD' AND UPPER(t.libelle) <> 'ACHATS' ))")
                ;
        return $q->execute();
    }
    public function findNotValideByIdDossierAndIdExercice($dossier_id, $exercice_id) {
        $q = $this->createQuery('j')
                ->where('j.id_dossier = ?', $dossier_id)
                ->andWhere('j.id_exercice = ?', $exercice_id)
                ->andWhere("j.isvalide = 0");
        return $q->execute();
    }

    public function findByIdTypeJournal($id_type) {
        $q = $this->createQuery('j')
                ->where('j.id_type_journal = ?', $id_type);
        return $q->execute();
    }

    
   
}
