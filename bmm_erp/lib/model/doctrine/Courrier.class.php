<?php

/**
 * Courrier
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    Bmm
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Courrier extends BaseCourrier {

    public function __toString() {
        return " Numéro : " . $this->getTypecourrier()->getPrefix() . $this->getUtilisateur()->getId() . $this->getNumero();
    }

    public function getNumerocourrierstring() {
        return "" . $this->getTypecourrier()->getPrefix() . $this->getUtilisateur()->getId() . $this->getNumero();
    }

    public function getImage() {
        echo "<img src='" . sfconfig::get('sf_appdir') . "uploads/images/" . $this->getPhoto() . "' width='100' height='100'>";
    }

    public function getListecourrier() {
        $user = sfContext::getInstance()->getUser()->getAttribute('userB2m');
        $courriers = Doctrine_Core::getTable('Courrier')
                        ->createQuery('a')
                        ->select("CONCAT(datecreation,' ',titre,' ',object) as object,id")
                        ->where('id_user=' . $user->getId())->execute();
        $array = array();
        foreach ($courriers as $co)
            $array[$co->getId()] = $co->getDatecreation();
        return $array;
    }

    public function getNumerocourrier($iduser, $idtype) {
        $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
        $query = "SELECT COALESCE(MAX(numero)+1, (overlay(EXTRACT('YEAR' FROM current_date)::text placing ' ' from 1 for 2))::integer*10000+1) as numero "
                . "FROM courrier "
                . "WHERE id_type=" . $idtype . " and id_user=" . $iduser;

        //die($q);
        $numeros = $conn->fetchAssoc($query);
        return $numeros[0]['numero'];
    }

    public function getNumerocourrierByFamille($id_famille, $idtype) {
        $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
        $query = "SELECT COALESCE(MAX(numero)+1, (overlay(EXTRACT('YEAR' FROM current_date)::text placing ' ' from 1 for 2))::integer*10000+1) as numero "
                . "FROM courrier "
                . "WHERE id_type=" . $idtype . " and id_famexpdes=" . $id_famille;

        //die($q);
        $numeros = $conn->fetchAssoc($query);
        return $numeros[0]['numero'];
    }

    public function getCourriersource() {
        $courrier = null;
        if ($this->getIdCourrier()) {
            $co = Doctrine_Core::getTable('courrier')->findOneById($this->getIdCourrier());
            if ($co)
                $courrier = $co;
        }
        return $courrier;
    }

    public function getExpediteursource($user) {
        $expediteur = null;
//        $user = $_SESSION['user'];
        $exp = $user->getExpdestinataire();
        if ($this->getIdCourrier()) {

            if ($exp) {
                $parcour = Doctrine_Core::getTable('parcourcourier')->findOneByIdCourierAndIdRec($this->getIdCourrier(), $exp->getId());
                if ($parcour)
                    $expediteur = $parcour->getExpdest();
            }
        }else {
            if ($exp) {
                $parcour = Doctrine_Core::getTable('parcourcourier')->findOneByIdCourierAndIdRec($this->getId(), $exp->getId());
                if ($parcour)
                    $expediteur = $parcour->getExpdest();
            }
        }
        return $expediteur;
    }

    public function getDatemaxdereponse($user=null) {
        $datemax = "";
        if ($this->getIdUser() != null)
            $exp = $this->getUtilisateur()->getExpdestinataire();
        else
            $exp = $this->getIdFamexpdes();
        if ($this->getIdCourrier()) {
            $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
            $reqette = "select "
                    . " to_char(parcourcourier.mdreponse::timestamp without time zone - current_date::timestamp without time zone, 'dd') as diff_date "
                    . " FROM   parcourcourier "
                    . " where id_courrierdest=" . $this->getId()
                    . " and id_courier=" . $this->getIdCourrier();
            if ($this->getIdUser() != null)
                $parcour = Doctrine_Core::getTable('parcourcourier')->findOneByIdCourierAndIdExp($this->getId(), $exp->getId());
            else {
                if ($exp != null)
                    $parcour = Doctrine_Core::getTable('parcourcourier')->findOneByIdCourierAndIdFamexpdes($this->getId(), $exp);
            }
            if (!$parcour && !$this->getDatereponse()) {
                $diff_dates = $conn->fetchAssoc($reqette);
                if (count($diff_dates) > 0) {
                    if ($diff_dates[0]['diff_date'] == "00")
                        $datemax = "<p style='color:#e71d48'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                    else
                    if ($diff_dates[0]['diff_date'] < 3 && $diff_dates[0]['diff_date'] > 1)
                        $datemax = "<p style='background-color: #fff;color:#c97f2c;'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                    else
                        $datemax = "<p style='background-color: #fff;color:#249009;'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                }
            } else
                $datemax = $this->DifferenceDateTransfer($exp);
        }
        echo $datemax;
    }

    public function DifferenceDateTransfer($exp_destinateur) {

        $datemax = "";
        if ($this->getIdCourrier()) {
            $user = $this->getCourriersource()->getUtilisateur();
            
            $expsource = $user->getExpdestinataire();

            $query = "SELECT   to_char(parcourcourier.mdreponse::timestamp without time zone - courrier_dest.datereponse::timestamp without time zone, 'dd') as diff_date"
                    . " FROM   courrier courrier_exp,courrier courrier_dest,   parcourcourier "
                    . " WHERE   courrier_exp.id = parcourcourier.id_courier  "
                    . " and courrier_dest.id=parcourcourier.id_courrierdest"
                    . " and parcourcourier.id_exp=" . $expsource->getId()
                    . "  and parcourcourier.id_rec=" . $exp_destinateur->getId()
                    . "  and courrier_exp.id=" . $this->getIdCourrier()
                    . " and courrier_dest.id=" . $this->getId();
            
            $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
            $diff_dates = $conn->fetchAssoc($query);
            if (count($diff_dates) > 0) {
                $dif = $diff_dates[0]['diff_date'];
                if ($dif > 0)
                    $datemax = "<p style='background-color: #fff;color:#249009;'>Votre Courrier à été adressée avec succées dans le délai..." . $dif . ' Jour avant</p>';
                else
                    $datemax = "<p style='background-color: #fff;color:#db791a;'>Votre Courrier à été adressée avec succées dans le délai aprés le date limite..." . $dif . ' Jour</p>';
            }
        }
        return $datemax;
    }

    public function RecursiveCourrier() {
        $array = array();
        $i = 0;

        $array[$i] = $this->getId();
        $i++;
        $listescourriersdest = Doctrine_Core::getTable('courrier')->findByIdCourrier($this->getId());
        foreach ($listescourriersdest as $courrier) {
            $stop = 0;
            $array[$i] = $courrier->getId();
            while ($stop == 0) {
                $table = 0;
                // die($array[$i] . 'hh');
                $courrier_encour = Doctrine_Core::getTable('courrier')->findOneByIdCourrier($array[$i]);
                if ($courrier_encour) {
                    $i++;
                    $array[$i] = $courrier_encour->getId();
                } else {
                    $stop = 1;
                }
            }
        }

        return $array;
    }

    public function getDatemaxdereponse1() {
        $datemax = "";
        $user = sfContext::getInstance()->getUser()->getAttribute('userB2m');
        $exp = $this->getUtilisateur()->getExpdestinataire();
       
        if ($exp && $this->getIdCourrier()) {
            $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
            $reqette = "select "
                    . "to_char(parcourcourier.mdreponse::timestamp without time zone - current_date::timestamp without time zone, 'dd') as diff_date "
                    . "FROM   parcourcourier "
                    . "where id_courrierdest=" . $this->getId()
                    . " and id_courier=" . $this->getIdCourrier();

            $parcour = Doctrine_Core::getTable('parcourcourier')->findOneByIdCourierAndIdExp($this->getId(), $exp->getId());
            
            if (!$parcour && !$this->getDatereponse()) {
                $diff_dates = $conn->fetchAssoc($reqette);
                if (count($diff_dates) > 0) {
                    if ($diff_dates[0]['diff_date'] == "00")
                        $datemax = "<p style='color:#e71d48'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                    else
                    if ($diff_dates[0]['diff_date'] < 3 && $diff_dates[0]['diff_date'] > 1)
                        $datemax = "<p style='background-color: #fff;color:#c97f2c;'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                    else
                        $datemax = "<p style='background-color: #fff;color:#249009;'>Il vous reste : " . $diff_dates[0]['diff_date'] . " Jours  pour répondre  à ce courrier</p>";
                }
            } else
                $datemax = $this->DifferenceDateTransfer($exp);
        }
        return $datemax;
    }

}
